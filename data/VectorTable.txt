// vectorlist
const def_VL_PrintDebugMessage	= 0;	// VectorList作成時のエラーチェック表示をするか
const def_VL_AddBoundMutekiCount= 1;	// 地面衝突時の無敵カウント加算の有無　0:加算しない 1:加算する
const def_VL_AddWallBoundMutekiCount = 1;	// 壁衝突時の無敵カウント加算の有無　0:加算しない 1:加算する

const def_VLP_AomukeOki			= 590;	// 290 あお向けダウン
const def_VLP_UtubuseOki		= 591;	// 291 うつ伏せダウン
const def_VLP_FatalOki			= 590;	// 292 重傷ダウン

const def_VLP_Atama1			= 606;	// 300 頭やられ弱
const def_VLP_Atama2			= 606;	// 303 頭やられ中
const def_VLP_Atama3			= 606;	// 306 頭やられ強

const def_VLP_Hara1				= 607;	// 301 腹やられ弱
const def_VLP_Hara2				= 607;	// 304 腹やられ中
const def_VLP_Hara3				= 607;	// 307 腹やられ強

const def_VLP_Kutu1				= 608;	// 302 屈やられ弱
const def_VLP_Kutu2				= 608;	// 305 屈やられ中
const def_VLP_Kutu3				= 608;	// 308 屈やられ強

const def_VLP_Uki				= 620;	// 320 浮きやられ
const def_VLP_Oti				= 624;	// 324 落下やられ

const def_VLP_MaeTentou			= 621;	// 326 前転倒やられ
const def_VLP_HizaKuzure		= 627;	// 327 膝崩れやられ
const def_VLP_HizaKuzureOti		= 628;	// 328 膝崩れやられ→倒れ始める
const def_VLP_SuityokuUki		= 630;	// 330 垂直浮きやられ

const def_VLP_AomukeOiutiBound	= 650;	// 348 仰向け追い討ち・ダウン　※Battle_Std.SetPosition_DamageHanteiRectで348を決めうち指定してる
const def_VLP_UtubuseOiutiBound	= 660;	// 348 うつ伏せ追い討ち・ダウン

const def_VLP_AomukeOiutiBoundL	= 649;
const def_VLP_UtubuseOiutiBoundL= 659;

const def_VLP_AomukeOiutiBoundS	= 648;
const def_VLP_UtubuseOiutiBoundS= 658;

const def_VLP_AomukeOiutiDown	= 652;
const def_VLP_UtubuseOiutiDown	= 662;

// uki →　bound(end)
// uki →　bounduki →　bound(end)

const def_VLP_AomukeUki			= 620;
const def_VLP_UtubuseUki		= 621;

const def_VLP_AomukeBoundUki	= 651;
const def_VLP_AomukeBound		= 649;	// 350 仰向け跳ね・ダウン
const def_VLP_UtubuseBound		= 659;	// 351 うつ伏せ跳ね

const def_VLP_UtubuseBigBound	= 661;	// 353 うつ伏せ跳ね大
const def_VLP_UtubuseBigDown	= 659;	// 354 →うつ伏せダウン大

const def_VLP_UtubuseSlideBound	= 661;	// 355 うつ伏せ跳ね大
const def_VLP_UtubuseSlideDown	= 659;	// 356 →うつ伏せダウン大

const def_VLP_HaraBound			= 635;	// 331 腹吹き飛び

const def_VLP_KiriUkiNaname		= 633;	// 333 きりもみ吹き飛び・斜め
const def_VLP_KiriUkiSuityoku	= 634;	// 334 きりもみ吹き飛び・垂直

const def_VLP_KiriUkiYoko		= 635;	// 335 きりもみ吹き飛び・横
const def_VLP_Kirimomi			= 636;	// 336 きりもみやられ

const def_VLP_UkiRelease		= 624;	// 345 浮き落下開放
const def_VLP_SuityokuRelease	= 624;	// 346 垂直落下開放

const def_VLP_AirAutoRecover	= 32;	// 33 オートリカバリー
const def_VLP_WallBound			= 621;	// 340 壁バウンド
const def_VLP_WallDown			= 659; // 壁バウンド着地



/*

   LV Name
00 A0 0  超弱 LV0
01 A1 1  弱 LV1
02 B1 2  中 LV2
03 B2 2  中 LV2
04 C1 3  強 LV3
05 C2 3  強 LV3
06 D1 3  強 LV3
07 D2 3  強 LV3
08 E1 4  特大 LV4
09 E2 4  特大 LV4
10 F1 5  超大 LV5
11 F2 5  超大 LV5


00 A0 0   4 超弱 LV0
01 A1 1   7 弱 LV1
02 B1 2   8 中 LV2
03 B2 2   9 中 LV2　　強めの中
04 C1 3  10 強 LV3　　強攻撃、弱めの必殺
05 C2 3  11 強 LV3　　
06 C3 3  12 強 LV3　　強めの必殺
07 D1 4  14 特大 LV4
08 D2 4  14 特大 LV4
09 E1 5  15 超大 LV5
*/

const def_VL_AtkLv_A0 = 0;
const def_VL_AtkLv_A1 = 1;
const def_VL_AtkLv_B1 = 2;
const def_VL_AtkLv_B2 = 3;
const def_VL_AtkLv_C1 = 4;

// なんとなく定数定義
const def_VL_GuardPat_Ground	= 17;
const def_VL_GuardPat_Air 		= 19;
const def_VL_GuardPat_Crouch	= 18;
const def_VL_NagenukePat		= 60;
const def_VL_NagenukePat_Air	= 61;
const def_VL_NagenukerarePat	= 17;
const def_VL_NagenukerarePat_Air= 19;

//ベクトルタイム
const def_VL_VT_Hit_Std_A0		= 10;
const def_VL_VT_Hit_Std_A1		= 13;
const def_VL_VT_Hit_Std_B1		= 16;
const def_VL_VT_Hit_Std_B2		= 17;
const def_VL_VT_Hit_Std_C1		= 18;

const def_VL_VT_Hit_Cro_A0		= 11;
const def_VL_VT_Hit_Cro_A1		= 14;
const def_VL_VT_Hit_Cro_B1		= 17;
const def_VL_VT_Hit_Cro_B2		= 18;
const def_VL_VT_Hit_Cro_C1		= 19;

//倒れるまで4F追加＆確定ダウンなので短め
//きりもみ崩れ落ちでも部分的に使用
const def_VL_VT_Hit_Kuzure_D1	= 18;
const def_VL_VT_Hit_Kuzure_D2	= 21;
const def_VL_VT_Hit_Kuzure_E1	= 24;

// ガードのけぞり時間
const def_VL_VT_Guard_Std_A0	=  8;
const def_VL_VT_Guard_Std_A1	= 11;
const def_VL_VT_Guard_Std_B1	= 14;
const def_VL_VT_Guard_Std_B2	= 15;
const def_VL_VT_Guard_Std_C1	= 16;

const def_VL_VT_Guard_Air_A0	= 10;
const def_VL_VT_Guard_Air_A1	= 12;
const def_VL_VT_Guard_Air_B1	= 14;
const def_VL_VT_Guard_Air_B2	= 15;
const def_VL_VT_Guard_Air_C1	= 16;

//受身不能時間（地上技など）
const def_VL_UT_Hit_Air_A1		= 17;//弱
const def_VL_UT_Hit_Air_B1		= 22;//中
const def_VL_UT_Hit_Air_B2		= 23;
const def_VL_UT_Hit_Air_C1		= 24;//強
const def_VL_UT_Hit_Air_D1		= 27;//
const def_VL_UT_Hit_Air_E1		= 30;//特大

//受身不能時間（ジャンプ攻撃）
const def_VL_UT_Hit_AirAtk_A1	= 17;//弱
const def_VL_UT_Hit_AirAtk_B1	= 18;//中
const def_VL_UT_Hit_AirAtk_C1	= 19;//強


const def_VL_KoVector = 99; // そのベクトルでKOした時に代わりに使うベクトル番号 99
const def_VL_GroundKoVector = 254; // そのベクトルでKOした時に代わりに使うベクトル番号 254

const def_VL_HitFlag_AirAtkA	= 0; //復帰やられ弱
const def_VL_HitFlag_AirAtkB	= 1; //復帰やられ中
const def_VL_HitFlag_AirAtkC	= 2; //復帰やられ強
//const def_VL_HitFlag_Aerial	= 3; //エリアル吹き飛び（ジャンプ攻撃の浮きが高くなる）　廃止

// ※実はフラグになっている
const def_VL_Pow_LV0			= 1; //超弱（無声やられ）
const def_VL_Pow_LV1			= 2; //弱やられ
const def_VL_Pow_LV2			= 0; //デフォルトは中やられ(初期値は0なので)
const def_VL_Pow_LV3			= 4; //強やられ
const def_VL_Pow_Furimuki		= 8; // 振り向き属性（攻撃してきたものに振り向く。基本は相手操作親の向き依存。）
const def_VL_Pow_SPGuardLimit	= 16; // シールドに弱い　※未使用
const def_VL_Pow_JumpFallAnime	= 16; // FrameID100のときに落下してたら256に飛ぶ
const def_VL_Pow_GuardFloat		= 32; // ガードで浮くやつ（無敵がつく）
const def_VL_Pow_Kirimomi		= 64; // きりもみ処理がある　※未使用
const def_VL_Pow_LandBoundOnceLimit	= 64; // 初回バウンド時のデメリットなし
const def_VL_Pow_GroundAutoAnime= 128; // 地上やられアニメ自動調節処理を入れる
const def_VL_Pow_NoAdvFrameSet	= 256; // アドバでのフレーム固定を受け付けない　※未使用
const def_VL_Pow_WallBound		= 256; // 壁バウンドやられ
const def_VL_Pow_SetBoundVectorMuki	= 512; // 吹き飛びベクトルの向きに振り向く（絵と吹き飛ぶ方向が不一致だとおかしいもの）
const def_VL_Pow_LandBound		= 1024; // 地面バウンドやられ
const def_VL_Pow_Fukki			= 4096; //復帰やられ
const def_VL_Pow_Hizakuzure		= 8192; //膝崩れやられ
//32768 以上は型的に不可

//VectorList.SetTbl.append()

VectorList <-
{
	// 「021」のような書式は８進数になるので使用不可
		Tbl = // ベクトル数値テーブル
	[
		[   0,  1400,     0, -100,    0 ], //   0  1400 Head hit_A1 Stomach hit_A1 Crouch hit_A1 Stand guard_A1 Crouch guard_A1
        [   1,  1800,     0, -100,    0 ], //   0  1800 Head hit_B1 Stomach hit_B1 Crouch hit_B1 Stand guard_B1 Crouch guard_B1
        [   2,  2000,     0, -100,    0 ], //   0  2000 Head hit_B2 Stomach hit_B2 Crouch hit_B2 Stand guard_B2 Crouch guard_B2 Leap stand hit Leap crouch hit
        [   3,  2200,     0, -100,    0 ], //   0  2200 Head hit_C1 Stomach hit_C1 Crouch hit_C1 Stand guard_C1 Crouch guard_C1 Leap stand guard Leap crouch guard Stand guard_D2 Crouch guard_D2

        [   6,  1600,     0,  -60,   0 ], // Extra large Max 25F
        [   7,  1100, -3700,    0, 300 ], // Down 7 400 -3400 0 200
        [   8,  1000, -3200,    0, 300 ], // Weak down
        [   9,  7000,     0,    0,   0 ], // Stomach blow away
		
		//HYD stuff
		[  10,  900, -2300,    0, 250 ], // エリアル浮き
		[  22,  10000,     0,    0,   0 ], // 超腹吹き飛び
		//[  13,   820,     0,  -30,   0 ], 特大のけぞりベクトル(最大27Fのけぞる)
		

        [  16,  2100,     0, -130,    0 ], // 0 2100 Slight short head hit_C1 Slight short stomach hit_C1 Slight short crouch hit_C1 Slight short stand guard_C1 Slight short crouch guard_C1

        [  20,     0,     0,    0,    0 ], // 0 0 No flinch

        [  24,  2000,     0, -100,    0 ], // 0 2000 Thrown escape hit
        [  25,  3000, -2000, -150,  150 ], // 33 3605 Aerial throw escape hit
        [  26,   750, -2000,    0,  250 ], // 69 2136 KO down pursuit

        [  39,  1500, -2500,    0,  180 ], // 59 2915 Low diagonal spinning float_C2
		
		[  40,  3000, -2800, -100, 300 ], // 軽め？横吹き飛び

        [  41,  2000, -3800,    0,  250 ], // 62 4294 Diagonal spinning float_D1
        [  42,  2300, -4000,    0,  250 ], // 60 4614 Diagonal spinning float_D2

        [  47,   900, -1800,    0,  250 ], // 63 2012 Fall_C1
        [  48,  1200, -2000,    0,  250 ], // 59 2332 Fall_C2
        [  49,  1400, -2000,    0,  180 ], // 55 2441 Spinning fall_D1
        [  50,  1600, -2200,    0,  180 ], // 53 2720 Spinning fall_D2
        [  51,  1000, -2200,    0,  180 ], // 53 2720 Short spinning fall_D2
        [  52,  1000, -2000,    0,  180 ], // 63 2236 Short spinning fall_D1

        [  60,  1300, -2300,    0,  250 ], // 60 2641 Float_B2
        [  61,  1400, -2600,    0,  250 ], // 58 3052 Float_C2
        [  62,  1600, -2800,    0,  250 ], // 57 3328 Float_D1
        [  63,  1700, -3000,    0,  250 ], // 56 3605 Float_D2

        [  97,   300, -3800,    0,  250 ], // Wall stick
        [  98,   300, -2800,    0,  250 ], // Wall stick
        [  99,  1000, -2800,    0,  250 ], // Small wall rebound

        [ 100,  1200, -1200,    0,  250 ], // 45 1697 Low float_B1
        [ 101,  1300, -1200,    0,  250 ], // 42 1769 Low float_B2

        [ 103,   300, -4200,    0,  250 ], // 85 4210 Bound_E1(1)

        [ 104,  2900,  2100,    0,  250 ], // Diagonal slide_D1
        [ 105,  3200,  2400,    0,  250 ], // Diagonal slide_D2

        [ 107,  1700, -1300,    0,  250 ], // 37 2140 Low float_C2
        [ 108,  2200, -1600,    0,  250 ], // 36 2720 Low float_D2

        [ 110,  1000, -2000,    0,  250 ], // 63 2236 Float_A1
        [ 111,  1200, -2200,    0,  250 ], // 61 2505 Float_B1
        [ 112,  1400, -2400,    0,  250 ], // 59 2778 KO down Float_C1 Leap air hit Silent down
        [ 113,   300, -3600,    0,  250 ], // 85 3612 Vertical float_C1 Bound_D1(1)
        [ 114,   600, -4000,    0,  250 ], // 81 4044 Error avoidance Vertical float_C2 Bound_D2(1) Leap CH hit(1) Silkan air
        [ 115,   300, -5000,    0,  250 ], // 86 5008 Vertical float_D1 Vertical spinning float_D1
        [ 116,   600, -5800,    0,  250 ], // 84 5830 Vertical float_D2 Vertical spinning float_D2 Silkan ground Silkan EX
        [ 117,  1200, -3400,    0,  250 ], // 67 3584 Diagonal float_C1 Diagonal bound_D1(1) Diagonal bound_C1(1)
        [ 118,  1400, -3700,    0,  250 ], // 64 3981 Diagonal float_C2 Diagonal bound_D2(1) Diagonal bound_C2(1)
        [ 119,  2200, -2400,    0,  250 ], // 47 3255 Horizontal float_C1
        [ 120,  2600, -2600,    0,  250 ], // 45 3676 Horizontal float_C2
        [ 121,  3400, -2800,    0,  250 ], // 39 4404 Horizontal spinning float_D1
        [ 122,  3800, -3000,    0,  250 ], // 38 4841 Horizontal spinning float_D2
        [ 123,   600,  3400,    0,  250 ], // 80 3649 Bound_D1 Smash_D1 Bound_E1
        [ 124,   900,  3800,    0,  250 ], // 77 4100 Bound_D2 Smash_D2 Leap CH hit
        [ 125,  2100,  2400,    0,  250 ], // 48 3189 Diagonal bound_D1 Diagonal slide_D1 Diagonal long slide_D1
        [ 126,  2500,  3000,    0,  250 ], // 50 3905 Diagonal bound_D2 Diagonal slide_D2 Diagonal long slide_D2
        [ 127,  1600, -1200,    0,  250 ], // 39 2025 Bound_C1 Horizontal bound_B1 Horizontal float Bound_C1(1)
        [ 128,  2100, -1600,    0,  250 ], // 41 2720 Bound_C2 Horizontal bound_B2 Horizontal float Bound_C2(1)
        [ 129,  2500, -2000,    0,  250 ], // 43 3255 Horizontal bound_D1
        [ 130,  3000, -2400,    0,  250 ], // 47 3905 Horizontal bound_D2
        [ 131,  2000,  1800,    0,  250 ], // 45 2705 Mid-bound float_C1 Short slide_D1
        [ 132,  2400,  2000,    0,  250 ], // 42 3189 Mid-bound float_C2 Short slide_D2
        [ 133,  2700, -2200,    0,  250 ], // 46 3464 Long-bound float_D1 Horizontal long float Bound_D1(1)
        [ 134,  3000, -2600,    0,  250 ], // 46 3846 Long-bound float_D2 Horizontal long float Bound_D2(1)
		[ 135,  1500, -1200,    0,  250 ], //  38 1920 Diagonal Slide_D1(1)
		[ 136,  2500, -1800,    0,  250 ], //  35 3080 Diagonal Slide_D2(1)

		[ 137,   500, -1200,    0,  120 ], // Downed Pre-Pursuit Float
		[ 138,   600,  -800,    0,   80 ], // Downed Pre-Pursuit Float (Bound & Slide)
		[ 139,   600, -1800,    0,  250 ], //  71 1897 Slam_D1(1), Slam_C1(1)
		[ 140,   900, -2000,    0,  250 ], //  65 2193 Slam_D2(1), Slam_C2(1)
		[ 142,  1200, -1200,    0,  120 ], // Downed Pre-Pursuit Float Horizontal Slide

		[ 143,  2600, -3000,    0,  250 ], // Small Wall Stick
		[ 144,  5500, -3100,    0,  250 ], //  29 6313 Wall Bound_E1
		[ 145,   900,  -500,    0,  250 ], //  29 1029 Fall_B1
		[ 146,  1200,  -500,    0,  250 ], //  22 1300 Fall_B2

		[ 148,   300, -2700,    0,  250 ], //  83 2716 Combo Bound_C1(1)
		[ 149,   600, -3200,    0,  250 ], //  79 3255 Bound_C2(1)

		[ 157,  1330,     0,  -67,    0 ], //   0 1330 Short Head Hit_C1, Short Stomach Hit_C1, Short Crouch Hit_C1, Short Stand Guard_C1, Short Crouch Guard_C1, Silent Head Hit

		[ 159,  4700,     0, -180,    0 ], //   0 4700 Long Stand Guard_C1, Long Crouch Guard_C1
		[ 160,  1600,  1800,    0,  250 ], //  48 2408 Diagonal Bound_C1
		[ 161,  1800,  2200,    0,  250 ], //  50 2842 Diagonal Bound_C2

		[ 177,  1000,  1000,    0,  200 ], //  45 1414 Short Air Guard_C1
		[ 178,  1200,  1200,    0,  200 ], //  45 1697 Slightly Short Air Guard_C1

		[ 180,   700, -2600,    0,  250 ], //  74 2692 J Attack Float_A1
		[ 181,   700, -2700,    0,  250 ], //  75 2789 J Attack Float_B1
		[ 182,   600, -3200,    0,  250 ], //  79 3255 J Attack Float_C1

		[ 188,   600,  2800,    0,  250 ], //  77 2863 Slam_C1, Combo Bound_C1
		[ 189,   900,  3200,    0,  250 ], //  74 3324 Bound_C2, Slam_C2
		[ 190,   300,     0,  -30,    0 ], //   0  300 Knockdown_C1(1), Vertical Float_D1(1), Vertical Spin Float_D1(1), Bound_D1(2), Slam_D1(2), Bound_E1(2), Slam_C1(2), Combo Bound_C1(2)
		[ 191,   500,     0,  -50,    0 ], //   0  500 Knockdown_C2(1), Vertical Float_D2(1), Spin Knockdown_D1(1), Spin Knockdown_D2(1), Short Spin Knockdown_D1(1), Low Float_B1(1), Low Float_B2(1), Low Float_C2(1), Float_A1(1), Vertical Spin Float_D2(1), Bound_D2(2), Low Float_C1(1), Vertical Spin Float_E1(1), Slam_D2(2), Fall_B1(1), J Attack Float_A1(1), Bound_C2(2), Slam_C2(2), Diagonal Spin Float_E1(1), Mid Spin Knockdown Short_D1(1), Leap CH Hit(2), Aerial Float_E1(1), Pursuit_A1(1), Pursuit_B1(1), Pursuit_C1(1), KO Down Pursuit(1), Air Throw Bound_C1(2), Air Throw Diagonal Bound_C1(2)
		[ 192,   800,     0,  -80,    0 ], //   0  800 Error Avoidance(1), Low Float_D2(1), Float_B1(1), Vertical Float_C1(1), Vertical Float_C2(1), Low Float_D1(1), Fall_B2(1), J Attack Float_B1(1), Silcan Air(1), Silcan Ground(1), Silcan EX(1), Silent Down(1), Low Vertical Float_C1(1), Low Vertical Float_C2(1), Air Throw Drop_C1(1), Air Throw Ground Release Down_C1(1)
		[ 193,  1100,     0, -110,    0 ], //   0 1100 Float_B2(1), Float_C2(1), Float_D1(1), Float_D2(1), KO Down(1), Float_C1(1), Diagonal Float_C1(1), Diagonal Bound_D1(2), Diagonal Slide_D1(2), Diagonal Slide_D2(2), J Attack Float_C1(1), Diagonal Bound_C1(2), Leap Air Hit(1), Air Throw Ground Release Slide_C1(1), Air Throw Diagonal Drop_C1(1), Air Throw Small Bound_C1(1)
		[ 194,  1600,     0, -160,    0 ], //   0 1600 Diagonal Float_C2(1), Diagonal Bound_D2(2), Diagonal Bound_C2(2), Horizontal Diagonal Float_C2(1)
		[ 195,  1900,     0, -190,    0 ], //   0 1900 Low Diagonal Spin Float_C2(1), Diagonal Spin Float_D1(1), Diagonal Spin Float_D2(1), Horizontal Float_C1(1)
		[ 196,  2200,     0, -220,    0 ], //   0 2200 Horizontal Float_C2(1)
		[ 197,  2800,     0, -280,    0 ], //   0 2800 Horizontal Spin Float_D1(1), Wall Bound_D1(1), Wall Bound_D2(1), Wall Stick_D1(1), Wall Stick_D2(1), Wall Bound_E1(1), 2C Combo Float_D1(1), Wall Bound_C1(1), Wall Bound_C2(1), High Wall Bound_D1(1), High Wall Bound_D2(1)
		[ 198,  3000,     0, -300,    0 ], //   0 3000 Horizontal Spin Float_D2(1), Horizontal Spin Float_E1(1), Low Horizontal Spin Float_E1(1)
		[ 199,  2800,     0, -140,    0 ], //   0 2800 Diagonal Long Slide_D1(1)
		[ 200,  3000,     0, -150,    0 ], //   0 3000 Diagonal Long Slide_D2(1)
		[ 201,  3800, -3600,    0,  250 ], //  43 5234 Diagonal Spin Float_E1
		[ 202,  4600, -3000,    0,  250 ], //  33 5491 Low Horizontal Spin Float_E1

		[ 204,  6000,     0,    0,    0 ], //  Straight Horizontal Blow Away Like Belly Blow

		[ 207,  1000, -2500,    0,  180 ], //  68 2692 Mid Spin Knockdown Short_D1
		[ 208,  1900, -3000,    0,  250 ], //  57 3551 Horizontal Diagonal Float_C2

		[ 219,  3000,     0, -300,    0 ], //   0 3000 Blast Pow(1)
		[ 220,  4400, -1800,    0,  250 ], //  22 4753 Blast Pow

		[ 235,   600, -6200,    0,  250 ], //  84 6228 Aerial Float_E1

		[ 254,  1300,     0,  -50,    0 ], //   0 1300 Collapse_D1, Collapse_D2, Collapse_E1 (KO Damage)
		[ 255,     0, -1600,    0,  250 ], //  90 1600 (Wall Bound_D1)
		[ 256,     0, -2200,    0,  250 ], //  90 2200 (Wall Bound_D2), (Wall Stick_D1)
		[ 257,     0, -2600,    0,  250 ], //  90 2600 (Wall Bound_E1)

		[ 259,     0, -2800,    0,  250 ], //  90 2800 (Wall Stick_D2)
		[ 260,     0, -3000,    0,  250 ], //  90 3000 (High Wall Bound_D1)
		[ 261,     0, -3600,    0,  250 ], //  90 3600 (High Wall Bound_D2)
		[ 262,     0, -4000,    0,  250 ], //  90 4000 (High Wall Bound_E1)
		[ 263,  2500, -3000,    0,  250 ], //  Returning Wall Bound

		[ 267,  3000, -2000,    0,  250 ], //  33 3605 Wall Bound_C1
		[ 268,  3400, -2200,    0,  250 ], //  32 4049 Wall Bound_C2

		[ 270,  3400, -3200,    0,  250 ], //  43 4669 High Wall Bound_D1
		[ 271,  4200, -3400,    0,  250 ], //  38 5403 High Wall Bound_D2

		[ 290,  2000, -1160,    0,  250 ], //  30 2312 Pursuit_A1, Pursuit_B1, Pursuit_C1

		[ 341,  1000,   600,    0,  200 ], //  30 1166 Air Guard_A1
		[ 342,  1100,   700,    0,  200 ], //  32 1303 Air Guard_B1
		[ 343,  1200,   800,    0,  200 ], //  33 1442 Air Guard_B2
		[ 344,  1300,  1000,    0,  200 ], //  37 1640 Air Guard_C1, Leap Air Guard
		[ 345,  1400,  1100,    0,  200 ], //  38 1780 Air Guard_D2

		[ 350,  1000,     0,  -50,    0 ], //   0 1000 J Attack Head Damage_A1, J Attack Crouch Damage_A1, J Attack Stand Guard_A1, J Attack Crouch Guard_A1
		[ 351,  1200,     0,  -60,    0 ], //   0 1200 J Attack Head Damage_B1, J Attack Crouch Damage_B1, J Attack Stand Guard_B1, J Attack Crouch Guard_B1
		[ 352,  1400,     0,  -70,    0 ], //   0 1400 J Attack Head Damage_C1, J Attack Crouch Damage_C1, J Attack Stand Guard_C1, J Attack Crouch Guard_C1

		[ 354,  1000,   600,    0,  200 ], //  30 1166 J Attack Air Guard_A1
		[ 355,  1100,   700,    0,  200 ], //  32 1303 J Attack Air Guard_B1
		[ 356,  1300,  1000,    0,  200 ], //  37 1640 J Attack Air Guard_C1

		[ 371,  2500, -2400,    0,  250 ], //  43 3465 Ground Guard Float Horizontal_D1

		[ 373,  3500, -2600,    0,  250 ], //  36 4360 Ground Guard Float Horizontal_E1

		[ 376,  1700, -2700,    0,  250 ], //  57 3190 Ground Guard Float Vertical_D1

		[ 385,   300, -2500,    0,  250 ], //  83 2517 Low Vertical Float_C1
		[ 386,   300, -3200,    0,  250 ], //  84 3214 Low Vertical Float_C2

		[ 400,   600,  4000,    0,  250 ], //  81 4044 Air Throw Drop_C1
		[ 401,  2500, -1700,    0,  250 ], //  34 3023 Air Throw Ground Release Slide_C1
		[ 402,  2500,  2800,    0,  250 ], //  48 3753 Air Throw Diagonal Drop_C1
		[ 403,   600,  -700,    0,  250 ], //  49  921 Air Throw Ground Release Down_C1
		[ 404,   900,  4000,    0,  250 ], //  77 4100 Air Throw Bound_C1
		[ 405,   600, -1800,    0,  250 ], //  71 1897 Air Throw Bound_C1(1), Air Throw Small Bound_C1
		[ 406,  2400,  2800,    0,  250 ], //  49 3687 Air Throw Diagonal Bound_C1
		[ 407,  1000, -1800,    0,  250 ], //  60 2059 Air Throw Diagonal Bound_C1(1)

		[ 415,   900,  5000,    0,  250 ], //  77 4100 Air Throw Bound_C1

		[ 500,  2500, -3700,    0,  250 ], //  For 126 copy

		[ 600,  3500,  4000,    0,  250 ], //  126 Big Fall
		[ 601,  2400, -4700,    0,  250 ], //  118 Big Rebound

		[ 602,  8500, -8700,    0,  250 ], //  118 Big Rebound Ultra

		[ 603,  100, -20000,    0,  810 ], //  Super Vertical
		
		//UNi2 Vectors 
		[ 802,  7000, -1700,    0,  250 ],
		[ 803,  5000, -2700,    0,  250 ], //  90 2200 (Wall Bound_D2), (Wall Stick_D1)
		[ 804,  3000, -4000,  0, 300 ], // 長きりもみ吹き飛び
		[ 805,  7000,     0,    0,   0 ], // 腹吹き飛び
		[ 806,     0,     0,    0,   0 ], // 固め＆のけぞらない＆地上ガードクラッシュ
		[ 807,  1000, -2900,    0, 250 ], // 小壁跳ね返り
		[ 808,  7000,     0,    0,   0 ],
		[ 809,   0, -4000,    0,  250 ],
		[ 810,  2200, -4400,  -30, 300 ], // 斜め上吹き飛び  2600 -4000 -35 250 ※放物線に近い
	],
	
	SetTbl = []// ベクトル構成テーブル
}

//local usevectornum_list = array(useVectorNum, 0); //使っているvector_numのマーク用
local useVectorNum = 2560;


local vectmpl = {}; //ベクトル定義の前

vectmpl.dm <- function( str )
{
	if( def_VL_PrintDebugMessage )
	{
		print("\n" + str);
	}
}

vectmpl.table <- [];
vectmpl.table.resize(useVectorNum);

//使っているvector_numのマーク用
//使っていたらカウントアップ
vectmpl.usevectornum <- array(useVectorNum, 0); 
vectmpl.usename <- {};

//ベクトル定義に追加する
vectmpl.add <- function( t ) : (vectmpl)
{
	//エラー出力用ベクトル名
	local vecname = "["+t.number+"]"+t.name;
	
	//nameのエラーチェック
	if( t.name in usename )
	{
		dm(format("【警告】%sのnameがダブってます",vecname));
	}
	else
	{
		usename[t.name] <- 1; //
	}
	
	local addParam = function( tbl, slot, val ) : (vecname)
	{
		if( !( slot in tbl ) )
		{
			// print("\n 追加:"+slot+" > "+val);
			tbl[slot] <- val;
		}
	}
	local addParamAr = function( tbl, slot, ar, num ) : (vecname)
	{
		if( !( slot in tbl ) )
		{
			// print("\n 追加ar:"+slot+" > "+ar[num]);
			tbl[slot] <- ar[num];
		}
	}
	
	//tmpl_typeによる自動処理
	if( "tmpl_param" in t )
	{
		// print("\n"+vecname+" --------- tmpl_param指定あり");
		local tmpl_power = ( "power" in t.tmpl_param )? t.tmpl_param.power : 0;//0:超弱 1:A 2:B 3:C 4:特大
		local add_power_flags = ("power_flag" in t.tmpl_param)? t.tmpl_param.power_flag : 0;
		
		//tmpl_powerを参照する定義群
		//0〜11
		local tmpl_power_param_ar = [
		{power=def_VL_Pow_LV0, HitGroundEff = "Eff_Hit_Ground_A", VecTimeHitStd = def_VL_VT_Hit_Std_A0, VecTimeHitCro = def_VL_VT_Hit_Cro_A0, VecTimeGuardStd = def_VL_VT_Guard_Std_A0, VecTimeGuardAir = def_VL_VT_Guard_Air_A0, Oiuti=237 },//0
		{power=def_VL_Pow_LV1, HitGroundEff = "Eff_Hit_Ground_A", VecTimeHitStd = def_VL_VT_Hit_Std_A1, VecTimeHitCro = def_VL_VT_Hit_Cro_A1, VecTimeGuardStd = def_VL_VT_Guard_Std_A1, VecTimeGuardAir = def_VL_VT_Guard_Air_A1, Oiuti=237 },//1
		{power=def_VL_Pow_LV2, HitGroundEff = "Eff_Hit_Ground_A", VecTimeHitStd = def_VL_VT_Hit_Std_B1, VecTimeHitCro = def_VL_VT_Hit_Cro_B1, VecTimeGuardStd = def_VL_VT_Guard_Std_B1, VecTimeGuardAir = def_VL_VT_Guard_Air_B1, Oiuti=238 },//2
		{power=def_VL_Pow_LV2, HitGroundEff = "Eff_Hit_Ground_A", VecTimeHitStd = def_VL_VT_Hit_Std_B2, VecTimeHitCro = def_VL_VT_Hit_Cro_B2, VecTimeGuardStd = def_VL_VT_Guard_Std_B2, VecTimeGuardAir = def_VL_VT_Guard_Air_B2, Oiuti=238 },//3
		{power=def_VL_Pow_LV3, HitGroundEff = "Eff_Hit_Ground_B", VecTimeHitStd = def_VL_VT_Hit_Std_C1, VecTimeHitCro = def_VL_VT_Hit_Cro_C1, VecTimeGuardStd = def_VL_VT_Guard_Std_C1, VecTimeGuardAir = def_VL_VT_Guard_Air_C1, Oiuti=239 },//4
		]
		
		local tmpl_power_val = tmpl_power_param_ar[tmpl_power];
		
		if( t.tmpl_param.type == "yarare_stand" )
		{
			addParam( t, "ko_vector", def_VL_GroundKoVector );
			addParam( t, "prio_vector", 10 );// ベクトル優先度
			addParam( t, "Finalize_Hit", "Mv_Modori_YarareS" );
			addParam( t, "power", tmpl_power_param_ar[tmpl_power].power );
			t.power = t.power|def_VL_Pow_GroundAutoAnime|add_power_flags;
			
			
			if( "vector_num" in t.tmpl_param && "hit_pattern" in t.tmpl_param )
			{
				addParam( t, "tblcount", 1 );
				t.tbl <- [
					{
						
					}
				];
				addParam( t.tbl[0], "vector_num", t.tmpl_param.vector_num );
				addParam( t.tbl[0], "hit_pattern", t.tmpl_param.hit_pattern );
			}
			
			//tblの中
			local tmp = t.tbl[0];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "flag_isgroundvector", true );
			addParam( tmp, "out_effect_name", tmpl_power_val.HitGroundEff );
			addParam( tmp, "vector_time", tmpl_power_val.VecTimeHitStd );
			addParam( tmp, "vector_returntime", tmpl_power_val.VecTimeHitStd );
		}
		else if( t.tmpl_param.type == "yarare_crouch" )
		{
			addParam( t, "ko_vector", def_VL_GroundKoVector );// 膝くずれ
			addParam( t, "prio_vector", 10 );// ベクトル優先度
			addParam( t, "Finalize_Hit", "Mv_Modori_YarareC" );
			addParam( t, "power", tmpl_power_param_ar[tmpl_power].power );
			t.power = t.power|def_VL_Pow_GroundAutoAnime|add_power_flags;
			
			if( "vector_num" in t.tmpl_param && "hit_pattern" in t.tmpl_param )
			{
				addParam( t, "tblcount", 1 );
				t.tbl <- [
					{
						
					}
				];
				addParam( t.tbl[0], "vector_num", t.tmpl_param.vector_num );
				addParam( t.tbl[0], "hit_pattern", t.tmpl_param.hit_pattern );
			}
			
			//tblの中
			local tmp = t.tbl[0];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "flag_isgroundvector", true );
			addParam( tmp, "out_effect_name", tmpl_power_val.HitGroundEff );
			addParam( tmp, "vector_time", tmpl_power_val.VecTimeHitCro );
			addParam( tmp, "vector_returntime", tmpl_power_val.VecTimeHitCro );
		}
		else if( t.tmpl_param.type == "yarare_kuzure" )
		{
			addParam( t, "ko_vector", def_VL_GroundKoVector );// 膝くずれ
			addParam( t, "prio_vector", 0 );// ベクトル優先度
			addParam( t, "Finalize_Hit", "Mv_Modori_Down" );
			addParam( t, "power", tmpl_power_param_ar[tmpl_power].power );
			t.power = t.power|add_power_flags;
			
			//tblの中
			local tmp = t.tbl[0];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", -1 );
			
			addParam( tmp, "out_effect_name", tmpl_power_val.HitGroundEff );
			// addParamAr( tmp, "vector_time", [25,25,25,25,25], tmpl_power );
			addParam( tmp, "vector_returntime", 10 );
			if( !def_VL_AddBoundMutekiCount )
			{
				addParam( tmp, "flag_noboundmutekiplus", true );
			}
			// addParam( tmp, "hit_pattern", def_VLP_HizaKuzure );
			//flag_isgroundvectorは設定しない（ここで食らったら浮いて欲しい）
			
			local tmp = t.tbl[1];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "flag_noboundmutekiplus", true );			
			// addParam( tmp, "hit_pattern", def_VLP_HizaKuzureOti );

			local tmp = t.tbl[2];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "out_effect_name", "Eff_Hit_Down" );
			addParam( tmp, "flag_down", true );		
			// addParam( tmp, "hit_pattern", def_VLP_UtubuseBound );
		}
		else if( t.tmpl_param.type == "yarare_kirimomi" )
		{
			addParam( t, "ko_vector", def_VL_GroundKoVector );// 膝くずれ
			addParam( t, "prio_vector", 0 );// ベクトル優先度
			addParam( t, "Finalize_Hit", "Mv_Modori_KirimomiYarareS" );
			addParam( t, "power", tmpl_power_param_ar[tmpl_power].power );
			t.power = t.power|add_power_flags;
			
			//tblの中
			local tmp = t.tbl[0];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "flag_isgroundvector", true );
			
			addParam( tmp, "out_effect_name", tmpl_power_val.HitGroundEff );
			addParam( tmp, "vector_time", tmpl_power_val.VecTimeHitStd );
			addParam( tmp, "vector_returntime", tmpl_power_val.VecTimeHitStd );
		}
		else if( t.tmpl_param.type == "guard_stand" )
		{
			addParam( t, "ko_vector", def_VL_GroundKoVector );// 膝くずれ
			addParam( t, "prio_vector", 10 );// ベクトル優先度
			addParam( t, "Finalize_Guard", "Mv_Modori_GuardS" );
			addParam( t, "power", tmpl_power_param_ar[tmpl_power].power );
			t.power = t.power|add_power_flags;
			
			//tblの中
			local tmp = t.tbl[0];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "flag_isgroundvector", true );
			
			addParam( tmp, "vector_time", tmpl_power_val.VecTimeGuardStd );
			addParam( tmp, "vector_returntime", tmpl_power_val.VecTimeGuardStd );
		}
		else if( t.tmpl_param.type == "guard_crouch" )
		{
			addParam( t, "ko_vector", def_VL_GroundKoVector );// 膝くずれ
			addParam( t, "prio_vector", 10 );// ベクトル優先度
			addParam( t, "Finalize_Guard", "Mv_Modori_GuardC" );
			addParam( t, "power", tmpl_power_param_ar[tmpl_power].power );
			t.power = t.power|add_power_flags;
			
			//tblの中
			local tmp = t.tbl[0];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "flag_isgroundvector", true );
			
			addParam( tmp, "vector_time", tmpl_power_val.VecTimeGuardStd );
			addParam( tmp, "vector_returntime", tmpl_power_val.VecTimeGuardStd );
		}
		else if( t.tmpl_param.type == "guard_air" )
		{
			addParam( t, "ko_vector", def_VL_KoVector );
			addParam( t, "prio_vector", 10 );// ベクトル優先度
			addParam( t, "Finalize_Guard", "Mv_Modori_GuardA" );
			addParam( t, "power", tmpl_power_param_ar[tmpl_power].power );
			t.power = t.power|add_power_flags;
			
			//tblの中
			local tmp = t.tbl[0];
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "flag_isgroundvector", true );//空中ガードの着地は地上やられにしたいのでコレでOK
			addParam( tmp, "flag_nextnodown", true );
			
			addParam( tmp, "vector_time", tmpl_power_val.VecTimeGuardAir );
			addParam( tmp, "vector_returntime", 10 );
			addParam( tmp, "flag_noboundmutekiplus", true );//空中ガードの着地時の被弾でバウンドが増えないように																													
		}
		else if( t.tmpl_param.type == "guard_float" )
		{
			addParam( t, "ko_vector", def_VL_KoVector );
			addParam( t, "prio_vector", 10 );// ベクトル優先度
			addParam( t, "Finalize_Guard", "Mv_Modori_GuardA" );
			addParam( t, "power", tmpl_power_param_ar[tmpl_power].power );
			t.power = t.power|def_VL_Pow_GuardFloat|add_power_flags;
			
			//tblの中
			local tmp = t.tbl[0];
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "flag_isgroundvector", true );//空中ガードの着地は地上やられにしたいのでコレでOK
			addParam( tmp, "flag_nextnodown", true );
			
			addParam( tmp, "vector_time", tmpl_power_val.VecTimeGuardAir );
			addParam( tmp, "vector_returntime", 10 );
			addParam( tmp, "flag_noboundmutekiplus", true );//空中ガードの着地時の被弾でバウンドが増えないように																													
		}		
		else if( t.tmpl_param.type == "uki" )
		{
			// 浮く
			
			// print("\n"+vecname+" --------- tmpl_param指定あり");
			
			addParam( t, "ko_vector", 0 );// 修正しない
			addParam( t, "prio_vector", 100 );// ベクトル優先度
			addParam( t, "Finalize_Hit", "Mv_Modori_Down" );
			addParam( t, "power", tmpl_power_param_ar[tmpl_power].power );
			t.power = t.power|def_VL_Pow_JumpFallAnime|add_power_flags;
			addParam( t, "downhit_vector", tmpl_power_val.Oiuti );//ダウン追い打ちベクトル
			
			
			//tblの中
			local tmp = t.tbl[0];
			// addParam( tmp, "vector_type", 0 );
			
			// addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "ground_ukemi_num", 1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 8 );
			if( !def_VL_AddBoundMutekiCount )
			{
				addParam( tmp, "flag_noboundmutekiplus", true );
			}
			
			local tmp = t.tbl[1];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -2 );
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "out_effect_name", "Eff_Hit_Down" );
			addParam( tmp, "flag_down", true );
		}
		else if( t.tmpl_param.type == "uki_bound" )
		{
			// 地上へ叩きつけられて浮く
			if( def_VL_PrintDebugMessage && "tblcount" in t && t.tblcount != 3 )
			{
				print(format("\n【警告】%sのtblcount指定がおかしい",vecname));
			}
			
			addParam( t, "ko_vector", 0 );// 修正しない
			addParam( t, "prio_vector", 100 );// ベクトル優先度
			addParam( t, "Finalize_Hit", "Mv_Modori_Down" );
			addParam( t, "power", tmpl_power_param_ar[tmpl_power].power|def_VL_Pow_LandBound );
			t.power = t.power|add_power_flags;
			addParam( t, "downhit_vector", tmpl_power_val.Oiuti );//ダウン追い打ちベクトル
			
			//tblの中
			local tmp = t.tbl[0];
			// addParam( tmp, "vector_type", 0 );
			
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			if( !def_VL_AddBoundMutekiCount )
			{
				addParam( tmp, "flag_noboundmutekiplus", true );
			}
			
			local tmp = t.tbl[1];
			// addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -2 );
			addParam( tmp, "ground_ukemi_num", 1 );
			// addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "out_effect_name", "Eff_Hit_SlideDown" );
			addParam( tmp, "flag_noboundmutekiplus", true );
			
			local tmp = t.tbl[2];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -2 );
			// addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "ground_ukemi_num", 1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "out_effect_name", "Eff_Hit_Down" );
			addParam( tmp, "flag_down", true );
		}
		else if( t.tmpl_param.type == "uki_down" )
		{
			// 地上へ叩きつけられてダウン状態で浮く
			if( def_VL_PrintDebugMessage && "tblcount" in t && t.tblcount != 3 )
			{
				print(format("\n【警告】%sのtblcount指定がおかしい",vecname));
			}
			
			addParam( t, "ko_vector", 0 );// 修正しない
			addParam( t, "prio_vector", 100 );// ベクトル優先度
			addParam( t, "Finalize_Hit", "Mv_Modori_Down" );
			addParam( t, "power", tmpl_power_param_ar[tmpl_power].power|def_VL_Pow_LandBound );
			t.power = t.power|add_power_flags;
			addParam( t, "downhit_vector", tmpl_power_val.Oiuti );//ダウン追い打ちベクトル
			
			//tblの中
			local tmp = t.tbl[0];
			// addParam( tmp, "vector_type", 0 );
			
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			if( !def_VL_AddBoundMutekiCount )
			{
				addParam( tmp, "flag_noboundmutekiplus", true );
			}
			
			local tmp = t.tbl[1];
			// addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", 1 );
			// addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "out_effect_name", "Eff_Hit_Down" );
			addParam( tmp, "flag_noboundmutekiplus", true );
			addParam( tmp, "flag_down", true );

			local tmp = t.tbl[2];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -2 );
			// addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "ground_ukemi_num", 1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "out_effect_name", "Eff_Hit_MiniDown" );
			addParam( tmp, "flag_down", true );
		}
		else if( t.tmpl_param.type == "uki_bound_down" )
		{
			// 地上へ叩きつけられて浮いてダウン状態で浮く
			if( def_VL_PrintDebugMessage && "tblcount" in t && t.tblcount != 4 )
			{
				print(format("\n【警告】%sのtblcount指定がおかしい",vecname));
			}
			
			addParam( t, "ko_vector", 0 );// 修正しない
			addParam( t, "prio_vector", 100 );// ベクトル優先度
			addParam( t, "Finalize_Hit", "Mv_Modori_Down" );
			addParam( t, "power", tmpl_power_param_ar[tmpl_power].power|def_VL_Pow_LandBound );
			t.power = t.power|add_power_flags;
			addParam( t, "downhit_vector", tmpl_power_val.Oiuti );//ダウン追い打ちベクトル
			
			//tblの中
			local tmp = t.tbl[0];
			// addParam( tmp, "vector_type", 0 );
			
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			if( !def_VL_AddBoundMutekiCount )
			{
				addParam( tmp, "flag_noboundmutekiplus", true );
			}
			
			local tmp = t.tbl[1];
			// addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", -1 );
			// addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "out_effect_name", "Eff_Hit_SlideDown" );
			addParam( tmp, "flag_noboundmutekiplus", true );
			
			local tmp = t.tbl[2];
			// addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -1 );
			addParam( tmp, "ground_ukemi_num", 1 );
			// addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "out_effect_name", "Eff_Hit_MiniDown" );
			addParam( tmp, "flag_noboundmutekiplus", true );
			addParam( tmp, "flag_down", true );

			local tmp = t.tbl[3];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "ukemitime", -2 );
			// addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "ground_ukemi_num", 1 );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "out_effect_name", "Eff_Hit_MiniDown" );									  
			addParam( tmp, "flag_down", true );
		}
		else if( t.tmpl_param.type == "wall_bound" )
		{
			//壁バウンド
			addParam( t, "ko_vector", 0 );// 修正しない
			addParam( t, "prio_vector", 999 );// ベクトル優先度
			addParam( t, "Finalize_Hit", "Mv_Modori_Down" );
			addParam( t, "hitflag_set", 10 ); //「当たった時」に壁バウンドをセット
			// addParam( t, "hitflag_check", 10 ); //「当たった時」にチェックするフラグ
			// addParam( t, "hitflag_vector", 10 ); // hitflag_check が有効だった場合に移行するベクトルテーブル番号
			addParam( t, "power", def_VL_Pow_LV0|def_VL_Pow_JumpFallAnime|def_VL_Pow_WallBound );
			t.power = t.power|add_power_flags;
			
			if( !("tbl" in t) )
			{
				t.tbl <- [
					{
						
					},
					{
						
					}
				]
			}
			
			//tblの中
			local tmp = t.tbl[0];
			addParam( tmp, "ukemitime", -2 );//-2:引き継ぎ
			addParam( tmp, "vector_num", ( "vector_num" in t.tmpl_param )? t.tmpl_param.vector_num : 255 );//この仕様あり？
			addParam( tmp, "hit_pattern", def_VLP_WallBound );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "out_effect_name", "Eff_WallBound" );
			addParam( tmp, "ground_ukemi_num", 0 );
			if( !def_VL_AddWallBoundMutekiCount )
			{
				addParam( tmp, "flag_noboundmutekiplus", true );
			}
			
			local tmp = t.tbl[1];
			addParam( tmp, "vector_type", 0 );
			addParam( tmp, "vector_num", 20 );
			addParam( tmp, "hit_pattern", def_VLP_WallDown );
			addParam( tmp, "vector_time", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "ukemitime", -2 );
			addParam( tmp, "ground_ukemi_num", -1 );
			addParam( tmp, "vector_returntime", 0 );
			addParam( tmp, "out_effect_name", "Eff_Hit_Down" );
			addParam( tmp, "flag_down", true );
		}
	}	
	
	//ground_ukemi_num

	//vector_num使っているものをマーク
	foreach( i,v in t.tbl )
	{
		local usevector_num = t.tbl[i].vector_num;
		usevectornum[usevector_num] += 1; //使ってる
	}
	
	//ＫＯ時のベクトル修正チェック
	//Mv_Modori_Down以外に飛ぶものはベクトル修正しないと不味い
	if( !("ko_vector" in t) || t.ko_vector==0 )
	{
		if( t.Finalize_Hit != "Mv_Modori_Down" )
		{
			dm(format("【警告】%sのko_vector指定大丈夫か？",vecname));
		}
	}	

	//tblcountのエラーチェック
	local tblcount = t.tbl.len();
	if( !( "tblcount" in t ) )
	{
		dm(format("【連絡】%sのtblcount:%dをセット",vecname,tblcount));		
		t.tblcount <- tblcount; //数は自動で入れてあげよう
	}
	else if( tblcount != t.tblcount )
	{
		dm(format("【警告】%sのtblcountの数があってない",vecname));
	}
	
	//numberのエラーチェック
	if( "name" in vectmpl.table[t.number] )
	{
		dm(format("【警告】%sのnumberがダブってます",vecname));		
	}
	
	//Finalize_Hit
	if( "Finalize_Hit" in t || "Finalize_Guard" in t )
	{
		//Finalize指定があるのでＯＫ
	}
	else
	{
		dm(format("【警告】%sのFinalize指定がありません",vecname));		
	}
	
	if( "power" in t )
	{
		if( def_VL_PrintDebugMessage )
		{
			print("\n"+vecname+" pow:"+ t.power );
		}
	}
		

	//個別tblチェック
	for( local i=0; i<t.tbl.len(); i++ )
	{
		if( "vector_returntime" in t.tbl[i] )
		{
			if( t.tbl[i].vector_returntime == 0 )
			{
				local hitpat = t.tbl[i].hit_pattern;
				if( t.tbl[i].vector_num != 20 && ( hitpat != def_VLP_AomukeOiutiBound && hitpat != def_VLP_AomukeOiutiBoundL && hitpat != def_VLP_UtubuseOiutiBound && hitpat != def_VLP_UtubuseOiutiBoundL && hitpat != def_VLP_AomukeOiutiBoundS && hitpat != def_VLP_UtubuseOiutiBoundS && hitpat != def_VLP_AomukeOiutiDown && hitpat != def_VLP_UtubuseOiutiDown) )
				{
					dm(format("【警告】%sの%dのvector_returntimeが0です",vecname,i));
				}
			}
		}
		else
		{
			dm(format("【警告】%sの%dのvector_returntime指定がありません",vecname,i));
		}
		
		if( "hit_pattern" in t.tbl[i] )
		{
		}
		else
		{
			dm(format("【警告】%sの%dのhit_pattern指定がありません",vecname,i));
		}
		
		//
		if( "vector_num" in t.tbl[i] )
		{
			local find = 0; // 見つかったかどうか
			foreach( z in VectorList.Tbl )
			{
				// 0個目がベクトル番号
				if( z[0] == t.tbl[i].vector_num ) find = 1;
			}
			if( find == 0 )
			{
				dm(format("【警告】%sの%dで未定義のvector_numを使っています",vecname,i));			
			}
		}
	}
	
	//vector_returntimeチェック
	
	//テーブルに追加
	vectmpl.table[t.number] = t;
	
	//print("\nt.number:"+t.number);
	//if( "ukemitime" in t.tbl[0] ) print(" ukemi:"+t.tbl[0].ukemitime);
}

// 頭やられ
vectmpl.add({ number = 0, name = "頭やられ_A1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_A1, vector_num=0, hit_pattern = def_VLP_Atama1 },
})

vectmpl.add({ number = 1, name = "頭やられ_B1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_B1, vector_num=1, hit_pattern = def_VLP_Atama2 },
})

vectmpl.add({ number = 2, name = "頭やられ_C1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_C1, vector_num=3, hit_pattern = def_VLP_Atama3 },
})

// 腹やられ
vectmpl.add({ number = 3, name = "腹やられ_A1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_A1, vector_num=0, hit_pattern = def_VLP_Hara1 },
})

vectmpl.add({ number = 4, name = "腹やられ_B1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_B1, vector_num=1, hit_pattern = def_VLP_Hara2 },
})

vectmpl.add({ number = 5, name = "腹やられ_C1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_C1, vector_num=3, hit_pattern = def_VLP_Hara3 },
})

vectmpl.add({
	number = 10, // 定義番号

	name = "超腹吹き飛び大壁バウンド",
	prio_vector = 110, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない

	Finalize_Hit = "Mv_Modori_Down",
	wallbound_vector=251, //大壁バウンド	

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = 31, // 基本受け身不可時間
			vector_num = 22, // 使用ベクトル番号
			hit_pattern = 631,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ground_ukemi_num = 3, // 床受け身番号
			
			flags = [ "boundwall", "erasekasanari" ],
			//flag_boundwall = true, // 
			//flag_erasekasanari = true, // 重なり消去
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = 630,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -2, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名					
			flag_down = true,
		},
	]
})

vectmpl.add({
	number = 22, // 定義番号

	name = "特大のけぞり屈",
	prio_vector = 10, // ベクトル優先度
	ko_vector = def_VL_GroundKoVector, // KO時のベクトル修正 0 だと修正しない

	Finalize_Hit = "Mv_Modori_YarareC",			
	power=def_VL_Pow_LV3, //強やられレベル

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 85, // 使用ベクトル番号
			hit_pattern = 620,
			vector_time = 27, // 発生時間
			vector_returntime = 25, // 壁反射ベクトル
			ukemitime = -1, // 受身不能時間 -1:空中受け身不可
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Ground_B", // 発生エフェクト名
			flag_isgroundvector = true, // 地上のけぞりベクトル			
		},
	]
})



// 特殊
vectmpl.add({ number = 11, name = "のけぞらない",

	prio_vector = 0, // ベクトル優先度
	ko_vector = def_VL_KoVector, // KO時のベクトル修正 0 だと修正しない
	Finalize_Hit = "Mv_Modori_Down", //無いとファイナライズ通った時点でエラー
	power=def_VL_Pow_LV0, //声無しやられレベル

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = 0,
			guard_pattern = def_VL_GuardPat_Ground,
			vector_time = 0, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -1, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
		},
	]
})

vectmpl.add({ number = 12, name = "エラー回避",

	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 114, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})


//
// 23と24という番号を見てやられじゃないか判断してるので変更しないように
vectmpl.add({ number = 23, name = "投げ抜け押し返し",

	prio_vector = 100, // ベクトル優先度
	ko_vector = def_VL_KoVector, // KO時のベクトル修正 0 だと修正しない
	
	Finalize_Hit = "Mv_Modori_Nagenuke",
	Finalize_Guard = "Mv_Modori_Nagenuke",	
	power=def_VL_Pow_LV0, //声無しやられレベル

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VL_NagenukePat,
			guard_pattern = def_VL_NagenukePat,
			vector_time = 35, // 発生時間　15 + 15 + 硬直
			vector_returntime = 20, // 壁反射ベクトル
			ukemitime = -1, // 受身不能時間 -1:空中受け身不可
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			flag_isgroundvector = true, // 地上のけぞりベクトル			
		},
	]
})
//投げ抜け押し返しとセット
vectmpl.add({
	number = 24, name = "投げ抜けられやられ",
	
	prio_vector = 100, // ベクトル優先度
	ko_vector = def_VL_KoVector, // KO時のベクトル修正 0 だと修正しない

	Finalize_Hit = "Mv_Modori_Nagenukerare",
	Finalize_Guard = "Mv_Modori_Nagenukerare",
	power=def_VL_Pow_LV0, //声無しやられレベル

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 24, // 使用ベクトル番号
			hit_pattern = def_VL_NagenukerarePat, //抜けられポーズ
			guard_pattern = def_VL_NagenukerarePat,
			vector_time = 22, // 発生時間 19で五分(+16して押し返しのtimeと比較)
			vector_returntime = 20, // 壁反射ベクトル時間
			ukemitime = -1, // 受身不能時間 -1:空中受け身不可
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			flag_isgroundvector = true, // 地上のけぞりベクトル
		},
	]
})

vectmpl.add({ number = 25, name = "空中投げ抜け押し返し",
	
	prio_vector = 100, // ベクトル優先度
	ko_vector = def_VL_KoVector, // KO時のベクトル修正 0 だと修正しない
	
	Finalize_Hit = "Mv_Modori_NagenukeAir",
	Finalize_Guard = "Mv_Modori_NagenukeAir",	
	power=def_VL_Pow_LV0, //声無しやられレベル

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VL_NagenukePat_Air,
			guard_pattern = def_VL_NagenukePat_Air,
			vector_time = 27, // 発生時間　15 + 15 + 硬直
			vector_returntime = 20, // 壁反射ベクトル
			ukemitime = -1, // 受身不能時間 -1:空中受け身不可
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			flag_isgroundvector = false, // 地上のけぞりベクトル			
		},
	]
})
//投げ抜け押し返しとセット
vectmpl.add({
	number = 26, name = "空中投げ抜けられやられ",
	
	prio_vector = 100, // ベクトル優先度
	ko_vector = def_VL_KoVector, // KO時のベクトル修正 0 だと修正しない

	Finalize_Hit = "Mv_Modori_NagenukerareAir",
	Finalize_Guard = "Mv_Modori_NagenukerareAir",
	power=def_VL_Pow_LV0, //声無しやられレベル

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 25, // 使用ベクトル番号
			hit_pattern = def_VL_NagenukerarePat_Air, //抜けられポーズ
			guard_pattern = def_VL_NagenukerarePat_Air,
			vector_time = 19, // 発生時間 19で五分(+16して押し返しのtimeと比較)
			vector_returntime = 20, // 壁反射ベクトル時間
			ukemitime = -1, // 受身不能時間 -1:空中受け身不可
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			flag_isgroundvector = true, // 地上のけぞりベクトル
		},
	]
})

// 斜めきりもみ
vectmpl.add({ number = 39, name = "低斜めきりもみ浮き_C2",
	
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 39, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiNaname,
		},
		{
			vector_num = 195, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})


vectmpl.add({ number = 41, name = "斜めきりもみ浮き_D1",
	
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 41, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiNaname,
		},
		{
			vector_num = 195, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 42, name = "斜めきりもみ浮き_D2",
	
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 42, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiNaname,
		},
		{
			vector_num = 195, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

// 膝崩れ
vectmpl.add({ number = 44, name = "崩れ落ち_D2",
	
	tmpl_param = { type="yarare_kuzure", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Hizakuzure },

	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			vector_num = 254, // 使用ベクトル番号
			hit_pattern = def_VLP_HizaKuzure,
			vector_time = def_VL_VT_Hit_Kuzure_D2, // 発生時間
		},
		{
			vector_time = 4, // 発生時間
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_HizaKuzureOti,
		},
		{
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_UtubuseBound,
		},		
	]
})


// 転倒
vectmpl.add({ number = 47, name = "転倒_C1",
	
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 47, // 使用ベクトル番号
			hit_pattern = def_VLP_MaeTentou,
		},
		{
			vector_num = 190, // 使用ベクトル番号
			hit_pattern = def_VLP_UtubuseBound,
		},
	]
})

vectmpl.add({ number = 48, name = "転倒_C2",

	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 48, // 使用ベクトル番号
			hit_pattern = def_VLP_MaeTentou,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_UtubuseBound,
		},
	]
})


// しゃがみやられ
vectmpl.add({ number = 50, name = "屈やられ_A1",
	
	tmpl_param = { type="yarare_crouch", power=def_VL_AtkLv_A1, vector_num=0, hit_pattern=def_VLP_Kutu1 },
	
	power=def_VL_Pow_LV1, //弱やられレベル
})

vectmpl.add({ number = 51, name = "屈やられ_B1",
	
	tmpl_param = { type="yarare_crouch", power=def_VL_AtkLv_B1, vector_num=1, hit_pattern=def_VLP_Kutu2 },
})

vectmpl.add({ number = 52, name = "屈やられ_C1",
	
	tmpl_param = { type="yarare_crouch", power=def_VL_AtkLv_C1, vector_num=3, hit_pattern=def_VLP_Kutu3 },

	power=def_VL_Pow_LV3, //強やられレベル
})

vectmpl.add({ number = 55, name = "垂直浮き_D1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1 },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 115, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 190, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 56, name = "垂直浮き_D2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1 },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 116, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

// 微妙なやられシリーズ
vectmpl.add({ number = 60, name = "頭やられ_B2",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_B2, vector_num=2, hit_pattern = def_VLP_Atama3 },
})

vectmpl.add({ number = 65, name = "腹やられ_B2",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_B2, vector_num=2, hit_pattern = def_VLP_Hara3 },
})

vectmpl.add({ number = 70, name = "屈やられ_B2",
	tmpl_param = { type="yarare_crouch", power=def_VL_AtkLv_B2, vector_num=2, hit_pattern = def_VLP_Kutu3 },
})

vectmpl.add({ number = 75, name = "浮き_B2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_B2, },

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_B2, // 基本受け身不可時間
			vector_num = 60, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 76, name = "浮き_C2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 61, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 77, name = "浮き_C3",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 62, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 78, name = "浮き_C4",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 63, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})


// 頭やられ（短）
vectmpl.add({ number = 80, name = "頭やられ短_C1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_C1, vector_num=157, hit_pattern=def_VLP_Atama3 },
	power=def_VL_Pow_LV3, //強やられレベル
})

vectmpl.add({ number = 81, name = "腹やられ短_C1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_C1, vector_num=157, hit_pattern=def_VLP_Hara3 },
	power=def_VL_Pow_LV3, //強やられレベル
})

vectmpl.add({ number = 82, name = "屈やられ短_C1",
	tmpl_param = { type="yarare_crouch", power=def_VL_AtkLv_C1, vector_num=157, hit_pattern=def_VLP_Kutu3 },
	power=def_VL_Pow_LV3, //強やられレベル
})

vectmpl.add({ number = 99, name = "KOダウン",
	
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	prio_vector = 999, // ベクトル優先度

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 112, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})


vectmpl.add({ number = 101, name = "きりもみ転倒_D1",

	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 49, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 102, name = "きりもみ転倒_D2",

	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 50, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 103, name = "きりもみ転倒短_D2",

	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 51, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})



vectmpl.add({ number = 104, name = "きりもみ転倒短_D1",

	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 52, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})


vectmpl.add({ number = 105, name = "低浮き_B1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_B1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_B1, // 基本受け身不可時間
			vector_num = 100, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 106, name = "低浮き_B2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_B2, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_B2, // 基本受け身不可時間
			vector_num = 101, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})


vectmpl.add({ number = 107, name = "低浮き_C2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 107, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 108, name = "低浮き_D2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 108, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})


// 浮き
// 60〜65
vectmpl.add({ number = 110, name = "浮き_A1",
	
	tmpl_param = { type="uki", power=def_VL_AtkLv_A1, },

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_A1, // 基本受け身不可時間
			vector_num = 110, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 111, name = "浮き_B1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_B1, },

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_B1, // 基本受け身不可時間
			vector_num = 111, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 112, name = "浮き_C1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 112, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

// 垂直浮き 85〜90
vectmpl.add({ number = 113, name = "垂直浮き_C1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 113, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 114, name = "垂直浮き_C2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 114, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 115, name = "垂直きりもみ浮き_D1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 115, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiSuityoku,
		},
		{
			vector_num = 190, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 116, name = "垂直きりもみ浮き_D2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 116, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiSuityoku,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 117, name = "斜め浮き_C1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 117, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 118, name = "斜め浮き_C2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 118, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 119, name = "横浮き_C1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 119, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 195, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 120, name = "横浮き_C2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 120, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 196, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 121, name = "横きりもみ浮き_D1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 121, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 122, name = "横きりもみ浮き_D2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 122, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 198, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 123, name = "バウンド_D1",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 123, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 113, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 190, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 124, name = "バウンド_D2",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 124, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 114, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 125, name = "斜めバウンド_D1",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 125, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 117, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 126, name = "斜めバウンド_D2",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 126, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 118, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 127, name = "低浮き_C1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 127, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 128, name = "低浮き_D1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 128, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 129, name = "垂直きりもみ浮き_E1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_E1, // 基本受け身不可時間
			vector_num = 129, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiSuityoku,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 131, name = "横きりもみ浮き_E1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_E1, // 基本受け身不可時間
			vector_num = 131, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 198, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

// 壁にいったらぶつかるやられ
vectmpl.add({ number = 133, name = "壁バウンド_D1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 255, //壁ヒット時に移行するベクトル番号

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 133, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 134, name = "壁バウンド_D2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 256, //壁ヒット時に移行するベクトル番号
	
	counterhit_vector = 142, // カウンターヒット時だった場合に移行するベクトルテーブル番号

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 134, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

// スライド
vectmpl.add({ number = 135, name = "斜めスライド_D1",

	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 104, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 135, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBoundUki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 136, name = "斜めスライド_D2",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 105, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 136, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

// 壁はりつき
vectmpl.add({ number = 137, name = "壁はりつき_D1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 258, //壁ヒット時に移行するベクトル番号

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 133, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 138, name = "壁はりつき_D2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 259, //壁ヒット時に移行するベクトル番号

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 134, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

// 地面叩きつけ
vectmpl.add({ number = 139, name = "叩き付け_D1",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 123, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 139, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
		},
		{
			vector_num = 190, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 140, name = "叩き付け_D2",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 124, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 140, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 143, name = "小壁はりつき_D2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 259, //壁ヒット時に移行するベクトル番号

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 143, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 144, name = "壁バウンド_E1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 256, //壁ヒット時に移行するベクトル番号
	
	counterhit_vector = 142, // カウンターヒット時だった場合に移行するベクトルテーブル番号

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_E1, // 基本受け身不可時間
			vector_num = 144, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 145, name = "落ち_B1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_B1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_B1, // 基本受け身不可時間
			vector_num = 145, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 146, name = "落ち_B2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_B2, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_B2, // 基本受け身不可時間
			vector_num = 146, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 147, name = "斜め長滑り_D1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 125, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 199, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundL,
		},			
	]
})

vectmpl.add({ number = 148, name = "斜め長滑り_D2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 126, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 200, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundL,
		},			
	]
})



//ガード
vectmpl.add({ number = 150, name = "立ガード_A1",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_A1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 0, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

vectmpl.add({ number = 151, name = "立ガード_B1",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_B1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 1, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

vectmpl.add({ number = 152, name = "立ガード_C1",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_C1, },

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 3, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

vectmpl.add({ number = 157, name = "立ガード短_C1",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 157, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

vectmpl.add({ number = 159, name = "立ガード長_C1",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 159, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

// 屈ガード
vectmpl.add({ number = 160, name = "屈ガード_A1",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_A1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 0, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
			
		},
	]
})

vectmpl.add({ number = 161, name = "屈ガード_B1",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_B1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 1, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
		},
	]
})

vectmpl.add({ number = 162, name = "屈ガード_C1",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_C1, },

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 3, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
		},
	]
})

vectmpl.add({ number = 167, name = "屈ガード短_C1",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_C1, },
	
	prio_vector = 10, // ベクトル優先度
	ko_vector = def_VL_GroundKoVector, // KO時のベクトル修正 0 だと修正しない

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 157, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
		},
	]
})

vectmpl.add({ number = 169, name = "屈ガード長_C1",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 159, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
		},
	]
})

// 空ガード
vectmpl.add({ number = 170, name = "空ガード_A1",
	tmpl_param = { type="guard_air", power=def_VL_AtkLv_A1, },

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 341, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

vectmpl.add({ number = 171, name = "空ガード_B1",
	tmpl_param = { type="guard_air", power=def_VL_AtkLv_B1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 342, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

vectmpl.add({ number = 172, name = "空ガード_C1",
	tmpl_param = { type="guard_air", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 344, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

vectmpl.add({ number = 177, name = "空ガード短_C1",
	tmpl_param = { type="guard_air", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 177, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

// ジャンプ攻撃浮き
vectmpl.add({ number = 180, name = "Ｊ攻撃浮き_A1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_A1, },

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_AirAtk_A1, // 基本受け身不可時間
			vector_num = 180, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 181, name = "Ｊ攻撃浮き_B1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_B1, },

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_AirAtk_B1, // 基本受け身不可時間
			vector_num = 181, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 182, name = "Ｊ攻撃浮き_C1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_AirAtk_C1, // 基本受け身不可時間
			vector_num = 182, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

// バウンド
vectmpl.add({ number = 186, name = "バウンド_E1",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_E1, // 基本受け身不可時間
			vector_num = 123, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 103, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 190, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 189, name = "バウンド_C2",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },

	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 189, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 149, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 190, name = "叩き付け_C1",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 188, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 139, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
		},
		{
			vector_num = 190, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 191, name = "叩き付け_C2",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 189, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 140, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 192, name = "斜めバウンド_C1",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 160, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 62, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 193, name = "斜めバウンド_C2",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 161, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 63, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})


// 超技の吹き飛び関係
vectmpl.add({ number = 201, name = "斜めきりもみ浮き_E1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_E1, // 基本受け身不可時間
			vector_num = 201, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 202, name = "低横きりもみ浮き_E1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_E1, // 基本受け身不可時間
			vector_num = 202, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 198, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 204, name = "確定壁バウンド_E1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 263, //壁ヒット時に移行するベクトル番号

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_E1, // 基本受け身不可時間
			vector_num = 204, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			// flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})


vectmpl.add({ number = 207, name = "きりもみ中転倒短_D1",

	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 207, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 208, name = "横斜め浮き_C2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 208, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 210, name = "リープ立やられ",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_C1, },

	counterhit_vector = 216, // カウンターヒット時だった場合に移行するベクトルテーブル番号

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 2, // 使用ベクトル番号
			hit_pattern = def_VLP_Atama3,
		},
	]
})

vectmpl.add({ number = 211, name = "リープ空やられ",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },

	counterhit_vector = 216, // カウンターヒット時だった場合に移行するベクトルテーブル番号

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 112, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 212, name = "リープ屈やられ",
	tmpl_param = { type="yarare_crouch", power=def_VL_AtkLv_C1, },

	power=def_VL_Pow_LV3, //強やられレベル
	counterhit_vector = 216, // カウンターヒット時だった場合に移行するベクトルテーブル番号

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 2, // 使用ベクトル番号
			hit_pattern = def_VLP_Kutu3,
		},
	]
})

vectmpl.add({ number = 213, name = "リープ立ガード",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_C1, },

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 2, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

vectmpl.add({ number = 214, name = "リープ空ガード",
	tmpl_param = { type="guard_air", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 346, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

vectmpl.add({ number = 215, name = "リープ屈ガード",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_C1, },

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 2, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
		},
	]
})

vectmpl.add({ number = 216, name = "リープchやられ",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_E1, // 基本受け身不可時間
			vector_num = 124, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 114, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 217, name = "シルカン空中",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 114, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 218, name = "シルカン地上",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 116, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 219, name = "シルカンEX",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 116, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiSuityoku,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

//パワブラ
vectmpl.add({ number = 220, name = "ブラストPow",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 220, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 219, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

// Aシルカン
vectmpl.add({ number = 222, name = "地上シルカン立ガード",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_B2, },

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 1, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

vectmpl.add({ number = 223, name = "地上シルカン空ガード",
	tmpl_param = { type="guard_air", power=def_VL_AtkLv_B2, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 346, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

vectmpl.add({ number = 224, name = "地上シルカン屈ガード",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_B2, },

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 1, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
		},
	]
})

vectmpl.add({
	number = 228, // 定義番号

	name = "腹吹き飛び壁貼り付き",
	prio_vector = 110, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない
	wallbound_vector = 248, //壁貼り付き	

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = 31, // 基本受け身不可時間
			vector_num = 9, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ground_ukemi_num = 3, // 床受け身番号
			
			flags = [ "boundwall", "erasekasanari" ],
			//flag_boundwall = true, // 
			//flag_erasekasanari = true, // 重なり消去
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -2, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名					
		},
	]
})

vectmpl.add({
	number = 229, // 定義番号

	name = "腹吹き飛び壁貼り付き",
	prio_vector = 110, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない
	wallbound_vector = 249, //壁貼り付き	

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = 31, // 基本受け身不可時間
			vector_num = 9, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ground_ukemi_num = 3, // 床受け身番号
			
			flags = [ "boundwall", "erasekasanari" ],
			//flag_boundwall = true, // 
			//flag_erasekasanari = true, // 重なり消去
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -2, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名					
		},
	]
})

vectmpl.add({
	number = 248, // 定義番号

	name = "壁貼り付き_tall", // 
	prio_vector = 999, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = -2, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算

			vector_num = 97, // 使用ベクトル番号
			hit_pattern = def_VLP_WallBound,
			vector_time = 1, // 発生時間
			vector_returntime = 100, // 壁反射ベクトル
			ground_ukemi_num = 1, // 床受け身番号
			
			out_effect_name = "Eff_WallBound",
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			ukemitime = -2, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算

			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_WallDown,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名					

		},				
	]
})

vectmpl.add({
	number = 249, // 定義番号

	name = "壁貼り付き", // 
	prio_vector = 999, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = -2, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算

			vector_num = 98, // 使用ベクトル番号
			hit_pattern = def_VLP_WallBound,
			vector_time = 1, // 発生時間
			vector_returntime = 100, // 壁反射ベクトル
			ground_ukemi_num = 1, // 床受け身番号
			
			out_effect_name = "Eff_WallBound",
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			ukemitime = -2, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算

			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_WallDown,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名					

		},				
	]
})

// ラピッドビートの浮かせ
vectmpl.add({ number = 235, name = "エリアル浮き_E1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi },
	power=def_VL_Pow_LV0, //声無しやられレベル
	
	reflexhit_vector = 116, //同技

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_E1,//def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 235, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiSuityoku,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 236, name = "２Ｃ連浮き_D1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 258, //壁ヒット時に移行するベクトル番号
	
	reflexhit_vector = 138, //同技

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1,// 基本受け身不可時間
			vector_num = 133, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

//浮くタイプに
vectmpl.add({ number = 237, name = "追い討ち_A1",
	prio_vector = 100, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない
	power=def_VL_Pow_LV0, //声無しやられレベル

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 290, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
			vector_time = -1, // 発生時間
			vector_returntime = 14, // 壁反射ベクトル
			ground_ukemi_num = -255, // 必ず地上受身可能
			// flag_noboundmutekiplus = true, // 激突時の無敵カウント加算無し　ダウン追い打ちはカウントする
			flag_down = true, // ダウン状態扱いとする
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundS,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -1, // 受身不能時間 -1:空中受け身不可			
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名		
			flag_down = true, // ダウン状態扱いとする
		},
	]
	
})

vectmpl.add({ number = 238, name = "追い討ち_B1",
	prio_vector = 100, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない
	power=def_VL_Pow_LV0, //声無しやられレベル

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 290, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
			vector_time = -1, // 発生時間
			vector_returntime = 14, // 壁反射ベクトル
			ground_ukemi_num = -255, // 必ず地上受身可能
			// flag_noboundmutekiplus = true, // 激突時の無敵カウント加算無し　ダウン追い打ちはカウントする
			flag_down = true, // ダウン状態扱いとする
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundS,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -1, // 受身不能時間 -1:空中受け身不可			
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名		
			flag_down = true, // ダウン状態扱いとする
		},
	]
	
})

vectmpl.add({ number = 239, name = "追い討ち_C1",
	prio_vector = 100, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない
	power=def_VL_Pow_LV0, //声無しやられレベル

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 290, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
			vector_time = -1, // 発生時間
			vector_returntime = 14, // 壁反射ベクトル
			ground_ukemi_num = -255, // 必ず地上受身可能
			// flag_noboundmutekiplus = true, // 激突時の無敵カウント加算無し　ダウン追い打ちはカウントする
			flag_down = true, // ダウン状態扱いとする
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundS,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -1, // 受身不能時間 -1:空中受け身不可			
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名		
			flag_down = true, // ダウン状態扱いとする
		},
	]
	
})

vectmpl.add({ number = 240, name = "あお向け起き上がり",
	prio_vector = 100, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない
	power=def_VL_Pow_LV0, //声無しやられレベル

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOki, //332代用
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ground_ukemi_num = -1, // 床受け身番号
			flag_down = true, // ダウン状態扱いとする
		},
	]
})

vectmpl.add({ number = 241, name = "うつ伏せ起き上がり",
	prio_vector = 100, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない
	power=def_VL_Pow_LV0, //声無しやられレベル

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_UtubuseOki, //332代用
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ground_ukemi_num = -1, // 床受け身番号
			flag_down = true, // ダウン状態扱いとする
		},
	]
})



vectmpl.add({ number = 251, name = "無声頭やられ",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_B2, vector_num=157, hit_pattern=def_VLP_Atama3 },
	power=def_VL_Pow_LV0, //声無しやられレベル
})


vectmpl.add({ number = 252, name = "無声ダウン",
	tmpl_param = { type="uki", power=def_VL_AtkLv_B2, },
	
	Finalize_Hit = "Mv_Modori_Down",
	power=def_VL_Pow_LV0, //声無しやられレベル

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = 24, // 基本受け身不可時間
			vector_num = 112, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 253, name = "KOダウン追い討ち", // 
	prio_vector = 990, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 26, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
			vector_time = -1, // 発生時間
			vector_returntime = 10, // 壁反射ベクトル
			ground_ukemi_num = -1, // 床受け身番号
			flag_noboundmutekiplus = true, // 激突時の無敵カウント加算無し
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -1, // 受身不能時間 -1:空中受け身不可			
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名		
			flag_down = true, // ダウン状態扱いとする
		},
	]
})

vectmpl.add({ number = 254, name = "(KOやられ)", // 
	tmpl_param = { type="yarare_kuzure", power=def_VL_AtkLv_B2, power_flag=def_VL_Pow_Hizakuzure },
	
	prio_vector = 999, // ベクトル優先度
	ko_vector = def_VL_KoVector, // KO時のベクトル修正 0 だと修正しない

	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			vector_num = 254, // 使用ベクトル番号
			hit_pattern = def_VLP_HizaKuzure,
			vector_time = 25, // 発生時間
		},
		{
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_HizaKuzureOti,
			vector_time = 4, // 発生時間
		},
		{
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_UtubuseBigDown,
		},		
	]
})



//デフォルトの壁バウンド先
vectmpl.add({ number = 255, name = "(壁バウンド_D1)", // 
	tmpl_param = { type="wall_bound", power=def_VL_AtkLv_C1, vector_num=255 },
})

vectmpl.add({ number = 256, name = "(壁バウンド_D2)", // 
	tmpl_param = { type="wall_bound", power=def_VL_AtkLv_C1, vector_num=256 },
})

vectmpl.add({ number = 257, name = "(壁バウンド_E1)", // 
	tmpl_param = { type="wall_bound", power=def_VL_AtkLv_C1, vector_num=257 },
})

vectmpl.add({ number = 258, name = "(壁はりつき_D1)", // 
	tmpl_param = { type="wall_bound", power=def_VL_AtkLv_C1, vector_num=256 },
})

vectmpl.add({ number = 259, name = "(壁はりつき_D2)", // 
	tmpl_param = { type="wall_bound", power=def_VL_AtkLv_C1, vector_num=259 },
})

vectmpl.add({ number = 260, name = "(高壁バウンド_D1)", // 
	tmpl_param = { type="wall_bound", power=def_VL_AtkLv_C1, vector_num=260 },
})

vectmpl.add({ number = 261, name = "(高壁バウンド_D2)", // 
	tmpl_param = { type="wall_bound", power=def_VL_AtkLv_C1, vector_num=261 },
})

vectmpl.add({ number = 262, name = "(高壁バウンド_E1)", // 
	tmpl_param = { type="wall_bound", power=def_VL_AtkLv_C1, vector_num=262 },
})

vectmpl.add({ number = 263, name = "(確定壁バウンド_E1)", // 
	tmpl_param = { type="wall_bound", power=def_VL_AtkLv_C1, vector_num=263 },
})


vectmpl.add({ number = 267, name = "壁バウンド_C1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 255, //壁ヒット時に移行するベクトル番号

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 267, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 268, name = "壁バウンド_C2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 255, //壁ヒット時に移行するベクトル番号

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 268, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})


// 吹き飛ばす攻撃
vectmpl.add({ number = 270, name = "高壁バウンド_D1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 260, //壁ヒット時に移行するベクトル番号
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 270, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			// //flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 271, name = "高壁バウンド_D2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 261, //壁ヒット時に移行するベクトル番号
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 271, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			// //flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})




vectmpl.add({ number = 280, name = "頭やられ微短_C1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_C1, vector_num=16, hit_pattern=def_VLP_Atama3 },
})

vectmpl.add({ number = 281, name = "腹やられ微短_C1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_C1, vector_num=16, hit_pattern=def_VLP_Hara3 },
})

vectmpl.add({ number = 282, name = "屈やられ微短_C1",

	tmpl_param = { type="yarare_crouch", power=def_VL_AtkLv_C1, vector_num=16, hit_pattern=def_VLP_Kutu3 },
})

vectmpl.add({ number = 283, name = "立ガード微短_C1",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 16, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

vectmpl.add({ number = 284, name = "屈ガード微短_C1",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_C1, },
	
	prio_vector = 10, // ベクトル優先度
	ko_vector = def_VL_GroundKoVector, // KO時のベクトル修正 0 だと修正しない

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 16, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
		},
	]
})

vectmpl.add({ number = 285, name = "空ガード微短_C1",
	tmpl_param = { type="guard_air", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 178, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})



// ジャンプ攻撃やられ
vectmpl.add({ number = 291, name = "Ｊ攻撃頭やられ_A1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_A1, vector_num=350, hit_pattern=def_VLP_Atama3 },
	power=def_VL_Pow_LV1, //弱やられレベル
})

vectmpl.add({ number = 292, name = "Ｊ攻撃屈やられ_A1",
	tmpl_param = { type="yarare_crouch", power=def_VL_AtkLv_A1, vector_num=350, hit_pattern=def_VLP_Kutu3 },
	power=def_VL_Pow_LV1, //弱やられレベル
})

vectmpl.add({ number = 293, name = "Ｊ攻撃頭やられ_B1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_B1, vector_num=351, hit_pattern=def_VLP_Atama3 },
	power=def_VL_Pow_LV2, //中やられレベル
})

vectmpl.add({ number = 294, name = "Ｊ攻撃屈やられ_B1",
	tmpl_param = { type="yarare_crouch", power=def_VL_AtkLv_B1, vector_num=351, hit_pattern=def_VLP_Kutu3 },
	power=def_VL_Pow_LV2, //中やられレベル
})

vectmpl.add({ number = 295, name = "Ｊ攻撃頭やられ_C1",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_C1, vector_num=352, hit_pattern=def_VLP_Atama3 },
	power=def_VL_Pow_LV3, //強やられレベル
})

vectmpl.add({ number = 296, name = "Ｊ攻撃屈やられ_C1",
	tmpl_param = { type="yarare_crouch", power=def_VL_AtkLv_C1, vector_num=352, hit_pattern=def_VLP_Kutu3 },
	power=def_VL_Pow_LV3, //強やられレベル
})


vectmpl.add({ number = 303, name = "立ガード_B2",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_B2, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 2, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

vectmpl.add({ number = 307, name = "立ガード_D2",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_C1, },

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 3, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

// 屈
vectmpl.add({ number = 323, name = "屈ガード_B2",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_B2, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 2, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
		},
	]
})

vectmpl.add({ number = 327, name = "屈ガード_D2",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_C1, },

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 3, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
		},
	]
})

// 空中
// 空ガード

vectmpl.add({ number = 343, name = "空ガード_B2",
	tmpl_param = { type="guard_air", power=def_VL_AtkLv_B2, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 343, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

vectmpl.add({ number = 347, name = "空ガード_D2",
	tmpl_param = { type="guard_air", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 345, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

vectmpl.add({ number = 350, name = "Ｊ攻撃立ガード_A1",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_A1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 350, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

vectmpl.add({ number = 351, name = "Ｊ攻撃立ガード_B1",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_B1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 351, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

vectmpl.add({ number = 352, name = "Ｊ攻撃立ガード_C1",
	tmpl_param = { type="guard_stand", power=def_VL_AtkLv_C1, },

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 352, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Ground, //
			guard_pattern = def_VL_GuardPat_Ground,
		},
	]
})

vectmpl.add({ number = 354, name = "Ｊ攻撃屈ガード_A1",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_A1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 350, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
		},
	]
})

vectmpl.add({ number = 355, name = "Ｊ攻撃屈ガード_B1",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_B1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 351, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
		},
	]
})



vectmpl.add({ number = 356, name = "Ｊ攻撃屈ガード_C1",
	tmpl_param = { type="guard_crouch", power=def_VL_AtkLv_C1, },

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 352, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Crouch, //
			guard_pattern = def_VL_GuardPat_Crouch,
		},
	]
})


vectmpl.add({ number = 358, name = "Ｊ攻撃空ガード_A1",
	tmpl_param = { type="guard_air", power=def_VL_AtkLv_A1, },

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 354, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

vectmpl.add({ number = 359, name = "Ｊ攻撃空ガード_B1",
	tmpl_param = { type="guard_air", power=def_VL_AtkLv_B1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 355, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

vectmpl.add({ number = 360, name = "Ｊ攻撃空ガード_C1",
	tmpl_param = { type="guard_air", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 356, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

//ガード浮き
vectmpl.add({ number = 371, name = "地上ガード浮き横_D1",
	tmpl_param = { type="guard_float", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 371, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

vectmpl.add({ number = 373, name = "地上ガード浮き横_E1",
	tmpl_param = { type="guard_float", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 373, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

vectmpl.add({ number = 376, name = "地上ガード浮き縦_D1",
	tmpl_param = { type="guard_float", power=def_VL_AtkLv_C1, },
	
	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 376, // 使用ベクトル番号
			hit_pattern = def_VL_GuardPat_Air, //
			guard_pattern = def_VL_GuardPat_Air,
		},
	]
})

vectmpl.add({ number = 385, name = "低垂直浮き_C1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 385, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 386, name = "低垂直浮き_C2",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 386, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 387, name = "バウンドNBC_C2",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	power=def_VL_Pow_LandBoundOnceLimit, // 初回バウンド時のデメリットなし
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 189, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 149, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 388, name = "連コンバウンド_C1",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },

	power=def_VL_Pow_LandBoundOnceLimit, // 初回バウンド時のデメリットなし
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 188, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
			flag_noboundmutekiplus = true,
		},
		{
			vector_num = 148, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 190, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 389, name = "あお向け追い打ち",
	prio_vector = 100, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない
	power=def_VL_Pow_LV0, //声無しやられレベル

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundL,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ground_ukemi_num = -1, // 床受け身番号
			// flag_down = true, // ダウン状態扱いとする
		},
	]
})

vectmpl.add({ number = 390, name = "うつ伏せ追い打ち",
	prio_vector = 100, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない
	power=def_VL_Pow_LV0, //声無しやられレベル

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			ukemitime = -1, // 基本受け身不可時間
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_UtubuseOiutiBoundL,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ground_ukemi_num = -1, // 床受け身番号
			// flag_down = true, // ダウン状態扱いとする
		},
	]
})

//落ちてすぐ倒れる
vectmpl.add({ number = 400, name = "空投げ落とし_C1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 400, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
			vector_returntime = 0,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundS,
		},
	]
})

//地面に叩きつけたときの開放。はねて少し滑る
vectmpl.add({ number = 401, name = "空投げ地開放スライド_C1",
	
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1,
			vector_num = 401, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
			vector_returntime = 0,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundS,
		},			
	]
})

vectmpl.add({ number = 402, name = "空投げ斜め落とし_C1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 402, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
			vector_returntime = 0,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundS,
		},
	]
})

//ちょい浮いて倒れる
vectmpl.add({ number = 403, name = "空投げ地開放ダウン_C1",
	
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1,
			vector_num = 403, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
			vector_returntime = 0,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundS,
		},			
	]
})

//高空から叩き落として跳ねる
vectmpl.add({ number = 404, name = "空投げバウンド_C1",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 404, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
			vector_returntime = 0,
		},
		{
			vector_num = 405, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
			vector_returntime = 0,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundS,
		},			
	]
})

//地面からはねる
vectmpl.add({ number = 405, name = "空投げ小バウンド_C1",
	
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1,
			vector_num = 405, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
			vector_returntime = 0,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundS,
		},			
	]
})

//高空から叩き落として斜めに跳ねる
vectmpl.add({ number = 406, name = "空投げ斜めバウンド_C1",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 406, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
			vector_returntime = 0,
		},
		{
			vector_num = 407, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
			vector_returntime = 0,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundS,
		},			
	]
})

//空中投げで上に投げる
vectmpl.add({ number = 407, name = "空投げ垂直きりもみ浮き_D1",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 115, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiSuityoku,
		},
		{
			vector_num = 190, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundS,
		},
	]
})

//キャラ別とかの特殊なもの
vectmpl.add({ number = 410, name = "抜刀崩れ落ち",
	
	tmpl_param = { type="yarare_kuzure", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Hizakuzure },

	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_HizaKuzure,
			vector_time = 35, // 発生時間
		},
		{
			vector_time = 4, // 発生時間
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_HizaKuzureOti,
		},
		{
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_UtubuseBound,
		},		
	]
})

vectmpl.add({ number = 411, name = "即崩れ落ち",
	
	tmpl_param = { type="yarare_kuzure", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Hizakuzure },

	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_HizaKuzure,
			vector_time = 10, // 発生時間
		},
		{
			vector_time = 4, // 発生時間
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_HizaKuzureOti,
		},
		{
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_UtubuseBound,
		},		
	]
})

vectmpl.add({ number = 417, name = "確ダ低浮き_C1",
	tmpl_param = { type="uki_down", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 127, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 137, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 418, name = "確ダ低浮き_D1",
	tmpl_param = { type="uki_down", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 128, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 137, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},		
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})


vectmpl.add({ number = 427, name = "確ダ転倒_C1",
	
	tmpl_param = { type="uki_down", power=def_VL_AtkLv_C1, },

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 47, // 使用ベクトル番号
			hit_pattern = def_VLP_MaeTentou,
		},
		{
			vector_num = 137, // 使用ベクトル番号
			hit_pattern = def_VLP_UtubuseOiutiDown,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_UtubuseBound,
		},
	]
})

vectmpl.add({ number = 428, name = "確ダ転倒_C2",

	tmpl_param = { type="uki_down", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 48, // 使用ベクトル番号
			hit_pattern = def_VLP_MaeTentou,
		},
		{
			vector_num = 137, // 使用ベクトル番号
			hit_pattern = def_VLP_UtubuseOiutiDown,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_UtubuseBound,
		},
	]
})

vectmpl.add({ number = 431, name = "確ダきりもみ転倒_D1",

	tmpl_param = { type="uki_down", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 49, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 137, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 432, name = "確ダきりもみ転倒_D2",

	tmpl_param = { type="uki_down", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 50, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 137, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 433, name = "確ダきりもみ転倒短_D2",

	tmpl_param = { type="uki_down", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 51, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 137, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 434, name = "確ダきりもみ転倒短_D1",

	tmpl_param = { type="uki_down", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 52, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
		},
		{
			vector_num = 137, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})


// 地面叩きつけ
vectmpl.add({ number = 436, name = "確ダ叩き付け_D1",
	tmpl_param = { type="uki_bound_down", power=def_VL_AtkLv_C1, },
	
	tblcount = 4, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 123, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 139, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
		},
		{
			vector_num = 137, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 190, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 437, name = "確ダ叩き付け_D2",
	tmpl_param = { type="uki_bound_down", power=def_VL_AtkLv_C1, },
	
	tblcount = 4, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 124, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 140, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
		},
		{
			vector_num = 137, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})


//バウンドでダウン
vectmpl.add({ number = 440, name = "確ダ斜めバウンド_D1",
	tmpl_param = { type="uki_bound_down", power=def_VL_AtkLv_C1, },
	
	tblcount = 4, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 125, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 117, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 138, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 441, name = "確ダ斜めバウンド_D2",
	tmpl_param = { type="uki_bound_down", power=def_VL_AtkLv_C1, },
	
	tblcount = 4, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 126, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 118, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 138, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},		
	]
})


// スライド
vectmpl.add({ number = 442, name = "確ダ斜めスライド_D1",

	tmpl_param = { type="uki_bound_down", power=def_VL_AtkLv_C1, },
	
	tblcount = 4, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 104, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 135, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBoundUki,
		},
		{
			vector_num = 138, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},				
	]
})

vectmpl.add({ number = 443, name = "確ダ斜めスライド_D2",
	tmpl_param = { type="uki_bound_down", power=def_VL_AtkLv_C1, },
	
	tblcount = 4, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 105, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 136, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeUki,
		},
		{
			vector_num = 138, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})


// 壁はりつき
vectmpl.add({ number = 445, name = "確ダ壁はりつき_D1",
	tmpl_param = { type="uki_down", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 258, //壁ヒット時に移行するベクトル番号

	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 133, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 142, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 446, name = "確ダ壁はりつき_D2",
	tmpl_param = { type="uki_down", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 259, //壁ヒット時に移行するベクトル番号

	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 134, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 142, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiDown,
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

//new ----------------------------------------------------

//高空から叩き落として跳ねる
vectmpl.add({ number = 415, name = "空投げバウンド_C1_noreb",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 415, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
			vector_returntime = 0,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundS,
		},			
	]
})

vectmpl.add({ number = 500, name = "斜めバウンド_D2_bigger",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 126, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 500, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 600, name = "斜めバウンド_D2_Gigas",
	tmpl_param = { type="uki_bound", power=def_VL_AtkLv_C1, },
	
	tblcount = 3, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 600, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 601, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},			
	]
})

vectmpl.add({ number = 601, name = "斜め浮き_C2_Gigas",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 601, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 602, name = "斜め浮き_C2_Gigas_BoundWall",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	
	wallbound_vector = 256, //壁ヒット時に移行するベクトル番号
		
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 601, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
			
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 603, name = "斜め浮き_C2_Gigas_BoundWall_Maximus",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	
	wallbound_vector = 256, //壁ヒット時に移行するベクトル番号
	reflexhit_vector = 601, //同技
		
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 602, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
			
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 604, name = "斜め浮き_C2_Gigas_Maximus",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	
	wallbound_vector = 256, //壁ヒット時に移行するベクトル番号
	reflexhit_vector = 601, //同技
		
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 602, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
			
			//flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 605, name = "壁バウンド_D2_bigwall",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 263, //壁ヒット時に移行するベクトル番号
	
	counterhit_vector = 142, // カウンターヒット時だった場合に移行するベクトルテーブル番号

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 134, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 606, name = "big_vert_fastfall",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 603, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 700, name = "stand_C1_counter",
	tmpl_param = { type="yarare_stand", power=def_VL_AtkLv_C1, vector_num=3, hit_pattern = def_VLP_Atama3 },
	counterhit_vector = 114,
})

vectmpl.add({ number = 701, name = "crouch_C1_counter",
	
	tmpl_param = { type="yarare_crouch", power=def_VL_AtkLv_C1, vector_num=3, hit_pattern=def_VLP_Kutu3 },

	power=def_VL_Pow_LV3, //強やられレベル
	counterhit_vector = 114,
})

vectmpl.add({ number = 1100, name = "浮き_A1_nodown",
	
	tmpl_param = { type="uki", power=def_VL_AtkLv_A1, },
	downhit_vector = -1,

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_A1, // 基本受け身不可時間
			vector_num = 110, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 1110, name = "浮き_B1_nodown",
	tmpl_param = { type="uki", power=def_VL_AtkLv_B1, },
	downhit_vector = -1,

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_B1, // 基本受け身不可時間
			vector_num = 111, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 1120, name = "浮き_C1_nodown",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	downhit_vector = -1,

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 112, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

// 垂直浮き 85〜90
vectmpl.add({ number = 1130, name = "垂直浮き_C1_nodown",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	downhit_vector = -1,
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 113, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 1140, name = "垂直浮き_C2_nodown",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	downhit_vector = -1,
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 114, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 1150, name = "垂直きりもみ浮き_D1_nodown",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi },
	downhit_vector = -1,
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 115, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiSuityoku,
		},
		{
			vector_num = 190, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 1160, name = "垂直きりもみ浮き_D2_nodown",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi },
	downhit_vector = -1,
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 116, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiSuityoku,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 1170, name = "斜め浮き_C1_nodown",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	downhit_vector = -1,
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 117, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 193, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 1180, name = "斜め浮き_C2_nodown",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	downhit_vector = -1,
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 118, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 1270, name = "低浮き_C1_nodown",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	downhit_vector = -1,
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 127, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
		},
		{
			vector_num = 191, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})


vectmpl.add({ number = 1603, name = "斜め浮き_C2_Gigas_BoundWall_Maximus_NoDown",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	
	wallbound_vector = 256, //壁ヒット時に移行するベクトル番号
	reflexhit_vector = 601, //同技
	downhit_vector = -1,
		
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 602, // 使用ベクトル番号
			hit_pattern = def_VLP_Uki,
			
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 800, name = "downhit_vec_650",
	
	prio_vector = 0, // ベクトル優先度
	ko_vector = def_VL_KoVector, // KO時のベクトル修正 0 だと修正しない
	Finalize_Hit = "Mv_Modori_Down", //無いとファイナライズ通った時点でエラー
	power=def_VL_Pow_LV0, //声無しやられレベル

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 20, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundL,
			guard_pattern = def_VL_GuardPat_Ground,
			vector_time = -1, // 発生時間
			vector_returntime = 40, // 壁反射ベクトル
			ukemitime = -1, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
		},
	]
})

vectmpl.add({ number = 801, name = "downhit_vec_147_noslide",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_D1, // 基本受け身不可時間
			vector_num = 123, // 使用ベクトル番号
			hit_pattern = def_VLP_Oti, //332代用
		},
		{
			vector_num = 194, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeOiutiBoundL,
		},			
	]
})

vectmpl.add({ number = 802, name = "HYD Lazer",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, power_flag=def_VL_Pow_Kirimomi|def_VL_Pow_SetBoundVectorMuki },
	
	prio_vector = 110, // ベクトル優先度
	wallbound_vector = 803, //壁ヒット時に移行するベクトル番号
	
	counterhit_vector = 142, // カウンターヒット時だった場合に移行するベクトルテーブル番号

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_E1, // 基本受け身不可時間
			vector_num = 802, // 使用ベクトル番号
			hit_pattern = def_VLP_KiriUkiYoko,
			flag_boundwall = true, // 
			//flag_boundwall_stageside = true, // ステージ端のみ壁にぶつかる
			// flag_erasekasanari = true, // 重なり消去
			wall_ukemi_num = -1, // 壁受け身不可
		},
		{
			vector_num = 197, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({ number = 803, name = "HYD Lazer 2", // 
	tmpl_param = { type="wall_bound", power=def_VL_AtkLv_C1, vector_num=803 },
})

vectmpl.add({
	number = 804, // 定義番号 Hyde FF

	name = "腹吹き飛び小壁バウンド",
	prio_vector = 110, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない
	wallbound_vector = 807, //小壁バウンド	

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = 31, // 基本受け身不可時間
			vector_num = 805, // 使用ベクトル番号
			hit_pattern = 620,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ground_ukemi_num = 3, // 床受け身番号
			
			flags = [ "boundwall", "erasekasanari" ],
			//flag_boundwall = true, // 
			//flag_erasekasanari = true, // 重なり消去
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 806, // 使用ベクトル番号
			hit_pattern = 650,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -2, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名					
			flag_down = true,
		},
	]
})

vectmpl.add({
	number = 805, // 定義番号

	name = "腹吹き飛び",
	prio_vector = 110, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = 31, // 基本受け身不可時間
			vector_num = 805, // 使用ベクトル番号
			hit_pattern = 621,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ground_ukemi_num = 3, // 床受け身番号
			
			flags = [ "boundwall", "erasekasanari" ],
			//flag_boundwall = true, // 
			//flag_erasekasanari = true, // 重なり消去
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 806, // 使用ベクトル番号
			hit_pattern = 650,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -2, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名					
			flag_down = true,
		},
	]
})

vectmpl.add({
	number = 806, // 定義番号

	name = "UNi2のけぞらない",
	prio_vector = 0, // ベクトル優先度
	ko_vector = def_VL_KoVector, // KO時のベクトル修正 0 だと修正しない
	Finalize_Hit = "Mv_Modori_Down", //無いとファイナライズ通った時点でエラー
	power=def_VL_Pow_LV0, //声無しやられレベル

	tblcount = 1, // テーブル数
	tbl = 
	[
		{
			vector_num = 806, // 使用ベクトル番号
			hit_pattern = 0,
			guard_pattern = def_VL_GuardPat_Ground,
			vector_time = 0, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -1, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
		},
	]
})

vectmpl.add({ number = 807, name = "FF Bounce", // 
	tmpl_param = { type="wall_bound", power=def_VL_AtkLv_C1, vector_num=807 },
})

vectmpl.add({
	number = 808, // 定義番号

	name = "腹吹き飛び",
	prio_vector = 110, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = 31, // 基本受け身不可時間
			vector_num = 808, // 使用ベクトル番号
			hit_pattern = 635,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ground_ukemi_num = 3, // 床受け身番号
			
			flags = [ "boundwall", "erasekasanari" ],
			//flag_boundwall = true, // 
			//flag_erasekasanari = true, // 重なり消去
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 807, // 使用ベクトル番号
			hit_pattern = 650,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -2, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名					
			flag_down = true,
		},
	]
})

vectmpl.add({ number = 809, name = "236_236A",
	tmpl_param = { type="uki", power=def_VL_AtkLv_C1, },
	
	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = def_VL_UT_Hit_Air_C1, // 基本受け身不可時間
			vector_num = 809, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
		},
		{
			vector_num = 192, // 使用ベクトル番号
			hit_pattern = def_VLP_AomukeBound,
		},
	]
})

vectmpl.add({
	number = 810, // 定義番号

	name = "0202",
	prio_vector = 100, // ベクトル優先度
	ko_vector = 0, // KO時のベクトル修正 0 だと修正しない

	Finalize_Hit = "Mv_Modori_Down",

	tblcount = 2, // テーブル数
	tbl = 
	[
		{
			ukemitime = 31, // 基本受け身不可時間
			vector_num = 810, // 使用ベクトル番号
			hit_pattern = def_VLP_SuityokuUki,
			vector_time = -1, // 発生時間
			vector_returntime = 8, // 壁反射ベクトル
			ground_ukemi_num = 2, // 床受け身番号
		},
		{
			vector_type = 0, // 状態 0-地上 1-空中 （基本値 1）		
			vector_num = 806, // 使用ベクトル番号
			hit_pattern = 650,
			vector_time = -1, // 発生時間
			vector_returntime = 0, // 壁反射ベクトル
			ukemitime = -2, // 受身不能時間 -1:空中受け身不可 -2:引継ぎ -1000以下:((n+1000)*-1)加算
			ground_ukemi_num = -1, // 床受け身番号 -1:地上受け身不可
			out_effect_name = "Eff_Hit_Down", // 発生エフェクト名			
			flag_down = true,
		},
	]
})

foreach( i, v in vectmpl.usevectornum )
{
	if( v==0 )
	{
		local find = 0; //定義してあるか？
		foreach( z in VectorList.Tbl )
		{
			if( z[0] == i ) find = 1; //定義してあるのにどこにも使ってない
		}
		if( find && def_VL_PrintDebugMessage ) print( format("\n VectorList.Tbl[%3d]が未使用です",i ) );
	}
}

//↓デバッグ用ベクトル一覧出力
if( 0 )
{
	local power_lv_ar = ["A1","B1","B2","C1","C2","D1","D2","E1","E2","F1","F2"]
	local power_ar = [2200,2300,2400,2600,2900,3400,3900,4500,5000,6000]
	
	local outVecListTbl = array(512, 0 );
	
	print("\nnum,name,vecnum,lv,angle,power,x,y,addx,addy");
	for( local i=0;i<useVectorNum;i++ )
	{
		local target = vectmpl.table[i];
		if( "number" in target )
		{
			print(format("\n%3d,",i));
			local name = ("name" in target)? target.name : "";
			print(name);
			
			//使っているベクトルのパワーを計算
			if( "tbl" in target && target.tbl.len() > 0 )
			{
				for( local t=0; t<target.tbl.len(); t++ )
				{
					if( "vector_num" in target.tbl[t] )
					{
						local vec_num = target.tbl[t].vector_num;
						// if( t==0 ) print(","+vec_num);
						
						foreach( z in VectorList.Tbl )
						{
							// 0個目がベクトル番号
							if( z[0] == vec_num )
							{
								local vec = { x=z[1], y=z[2], addx=z[3], addy=z[4] };
								
								//ひとまずaddは無視して初速のパワーを計測してみる？
								//それとも移動量を出す？
								//a = √(a2 + b2)
								local power = sqrt(abs(vec.x*vec.x) + abs(vec.y * vec.y));
								local vstr = { x=abs(vec.x)/300, y= abs(vec.y)/300 };
								if( vstr.x > 15 ) vstr.x = 15;
								if( vstr.y > 15 ) vstr.y = 15;

								local set_name = format("%X%X",vstr.x,vstr.y);//+"="+power/1000;//？？？
								// target.name += "("+set_name+")";//
								// name = target.name;
								
								local par = 100;//(vec.addy>0)? 100 : 150;
								local power_lv = 0;
								for( local j=0; j<power_ar.len(); j++ )
								{
									power_lv = j;
									if( power*par/100 < power_ar[j] )
									{
										break;
									}
								}
								local angle = acos(vec.x/sqrt(vec.x*vec.x+vec.y*vec.y));
								angle=angle*180.0/PI;
								angle = abs(angle);
								if( angle < 0 ) angle = 0; 
								if( angle > 360 ) angle = 360; 
								//ざっくり10度刻みで良いかな
								// angle = angle / 10;
								
								if( t==0 )
								{
									print(","+power_lv_ar[power_lv]);
									print(format(",%3d",angle));
									print(format(",%d,%d,%d,%d,%d",power,vec.x,vec.y,vec.addx,vec.addy));
								}
								
								//シリアル出力用
								if( outVecListTbl[vec_num] == 0 )
								{
									outVecListTbl[vec_num] = { num=0, vec=[0,0,0,0,0], angle=0, power=0, use=[] };//型ｗ
								}
								outVecListTbl[vec_num].vec[0] = vec_num;
								outVecListTbl[vec_num].vec[1] = vec.x;
								outVecListTbl[vec_num].vec[2] = vec.y;
								outVecListTbl[vec_num].vec[3] = vec.addx;
								outVecListTbl[vec_num].vec[4] = vec.addy;
								outVecListTbl[vec_num].angle = angle;
								outVecListTbl[vec_num].power = power;
								outVecListTbl[vec_num].num = i;
								if( t != 0 )
								{
									outVecListTbl[vec_num].use.append( name+"("+t+")" );
								}
								else
								{
									outVecListTbl[vec_num].use.append( name );
								}
								break;
							}
						}
					}
				}
			}
			
		}
		else
		{
		
		}
	}
	
	//outVecListTblの出力
	if(1)
	{
		print("\n outVecListTbl:"+outVecListTbl.len());
		local lastPos = 0;
		for( local i=0; i<outVecListTbl.len(); i++ )
		{
			local nowVec = outVecListTbl[i];
			if( nowVec )
			{
				if( lastPos+1 != i ) print("\r\n");
				lastPos = i;
				print(format("\n\t\t[%4d, %5d, %5d, %4d, %4d ], // %3d %5d ",nowVec.vec[0], nowVec.vec[1], nowVec.vec[2], nowVec.vec[3], nowVec.vec[4], nowVec.angle, nowVec.power ) );
				for( local j=0; j<nowVec.use.len(); j++ )
				{
					print( nowVec.use[j]+" " );
				}
			}
		}
	}

	//csv用出力
	if(0)
	{
		//VectorListの配列の表示
		print("\n num,x,y,addx,addy,angle,power,use")
		for( local i=0; i<outVecListTbl.len(); i++ )
		{
			local nowVec = outVecListTbl[i];
			if( nowVec )
			{
				print(format("\n%4d, %5d, %5d, %4d, %4d,%3d,%5d,",nowVec.vec[0], nowVec.vec[1], nowVec.vec[2], nowVec.vec[3], nowVec.vec[4], nowVec.angle, nowVec.power ) );
				for( local j=0; j<nowVec.use.len(); j++ )
				{
					print( nowVec.use[j]+"," );
				}
			}
		}
	}	
}
//↑デバッグ用ベクトル一覧出力

if( 0 )
{
	local power_lv_ar = ["A1","B1","B2","C1","C2","D1","D2","E1","E2","F1","F2"]
	local power_ar = [2200,2300,2400,2600,2900,3400,3900,4500,5000,6000]
	for( local i=0; i<VectorList.Tbl.len(); i++ )
	{
		local z = VectorList.Tbl[i];
		local vec = { x=z[1], y=z[2], addx=z[3], addy=z[4] };
		
		local angle = acos(vec.x/sqrt(vec.x*vec.x+vec.y*vec.y));
		angle=angle*180.0/PI;

		//ひとまずaddは無視して初速のパワーを計測してみる？
		local power = sqrt(abs(vec.x*vec.x) + abs(vec.y * vec.y));
		local par = (vec.addy>0)? 100 : 150;
		
		local power_lv = 0;
		for( local j=0; j<power_ar.len(); j++ )
		{
			if( power*par/100 < power_ar[j] )
			{
				power_lv = j;
				break;
			}
		}
		
		local vstr = { x=abs(vec.x)/300, y= abs(vec.y)/300 };
		if( vstr.x > 15 ) vstr.x = 15;
		if( vstr.y > 15 ) vstr.y = 15;

		local set_name = format("%X%X",vstr.x,vstr.y);//+"="+power/1000;//？？？
								
		print( format("\n%3d,%5d,%5d,%5d,%5d,%d,%d,%s:%s",z[0],vec.x,vec.y,vec.addx,vec.addy,power,power_lv,power_lv_ar[power_lv],set_name) );
	}
}

//vectmpl.tableから実際に使うベクトルテーブルリストを作成する

VectorList.SetTbl.resize( useVectorNum ); //サイズを合わせる

local findcount = 0; //見つけた数

//print("\n");
foreach( i, v in vectmpl.table )
{
	if( "number" in v)
	{
		/*
		print(format(
		"%3d vec: %3d %s \n",findcount,i,v.name
		
		));
		*/
		
		if(0)
		{
			foreach( slot, val in VectorList.SetTbl )
			{
				if( "tbl" in v && "tbl" in val && "tblcount" in v && "tblcount" in val && v.tblcount == val.tblcount )
				{
					local same = 1;
					for( local j=0; j<v.tblcount; j++ )
					{
						// print(".");
						if( v.tbl[j].vector_num != val.tbl[j].vector_num )
						{
							same = 0;
							break;
						}
					}
					if( same )
					{
						print("\n "+v.name+"->"+val.name);
					}
				}
				// //同じのあるか探す
				// if( "power" in v && "power" in val && v.power == val.power )
				// {
					// print("\n powerが同じ:"+v.name+"->"+val.name);
				// }
			}
		}
		
		VectorList.SetTbl[findcount] = v; //入れる
		findcount++;
	}
}

VectorList.SetTbl.resize( findcount ); //サイズを合わせる

//ベクトル登録を楽にするためのテーブル
VectorSample <- {}; // テーブル生成
VectorSample.Tbl <- []; // Tbl生成
//VectorSample.Tbl.resize(100); // 適当に拡張

VectorSample.Tbl.append({ name = "シルカン地上",
	hit_stand	= { num="シルカン地上"	, reverse=0, novec=0 },
	hit_air		= { num="シルカン地上"	, reverse=0, novec=0 },
	hit_crouch	= { num="シルカン地上"	, reverse=0, novec=0 },
	guard_stand	= { num="地上シルカン立ガード"	, reverse=0, novec=0 },
	guard_air	= { num="地上シルカン空ガード"	, reverse=0, novec=0 },
	guard_crouch	= { num="地上シルカン屈ガード"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダ壁はりつき_D1",
	hit_stand	= { num="確ダ壁はりつき_D1"	, reverse=0, novec=0 },
	hit_air		= { num="確ダ壁はりつき_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダ壁はりつき_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダ壁はりつき_D2",
	hit_stand	= { num="確ダ壁はりつき_D2"	, reverse=0, novec=0 },
	hit_air		= { num="確ダ壁はりつき_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダ壁はりつき_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダ叩き付け_D1",
	hit_stand	= { num="確ダ叩き付け_D1"	, reverse=0, novec=0 },
	hit_air		= { num="確ダ叩き付け_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダ叩き付け_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダ叩き付け_D2",
	hit_stand	= { num="確ダ叩き付け_D2"	, reverse=0, novec=0 },
	hit_air		= { num="確ダ叩き付け_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダ叩き付け_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダ斜めバウンド_D1",
	hit_stand	= { num="確ダ斜めバウンド_D1"	, reverse=0, novec=0 },
	hit_air		= { num="確ダ斜めバウンド_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダ斜めバウンド_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダ斜めバウンド_D2",
	hit_stand	= { num="確ダ斜めバウンド_D2"	, reverse=0, novec=0 },
	hit_air		= { num="確ダ斜めバウンド_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダ斜めバウンド_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダ斜めスライド_D1",
	hit_stand	= { num="確ダ斜めスライド_D1"	, reverse=0, novec=0 },
	hit_air		= { num="確ダ斜めスライド_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダ斜めスライド_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダ斜めスライド_D2",
	hit_stand	= { num="確ダ斜めスライド_D2"	, reverse=0, novec=0 },
	hit_air		= { num="確ダ斜めスライド_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダ斜めスライド_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダ転倒_C1",
	hit_stand	= { num="確ダ転倒_C1"	, reverse=0, novec=0 },
	hit_air		= { num="確ダ転倒_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダ転倒_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダ転倒_C2",
	hit_stand	= { num="確ダ転倒_C2"	, reverse=0, novec=0 },
	hit_air		= { num="確ダ転倒_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダ転倒_C2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダきりもみ転倒_D1",
	hit_stand	= { num="確ダきりもみ転倒_D1"	, reverse=0, novec=0 },
	hit_air		= { num="確ダきりもみ転倒_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダきりもみ転倒_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダきりもみ転倒_D2",
	hit_stand	= { num="確ダきりもみ転倒_D2"	, reverse=0, novec=0 },
	hit_air		= { num="確ダきりもみ転倒_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダきりもみ転倒_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダきりもみ転倒短_D1",
	hit_stand	= { num="確ダきりもみ転倒短_D1"	, reverse=0, novec=0 },
	hit_air		= { num="確ダきりもみ転倒短_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダきりもみ転倒短_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード微短_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード微短_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード微短_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダきりもみ転倒短_D2",
	hit_stand	= { num="確ダきりもみ転倒短_D2"	, reverse=0, novec=0 },
	hit_air		= { num="確ダきりもみ転倒短_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダきりもみ転倒短_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード微短_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード微短_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード微短_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダ低浮き_C1",
	hit_stand	= { num="確ダ低浮き_C1"	, reverse=0, novec=0 },
	hit_air		= { num="確ダ低浮き_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダ低浮き_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "確ダ低浮き_D1",
	hit_stand	= { num="確ダ低浮き_D1"	, reverse=0, novec=0 },
	hit_air		= { num="確ダ低浮き_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="確ダ低浮き_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append( { name = "Ｊ攻撃浮き_A1",
	hit_stand	= { num="Ｊ攻撃頭やられ_A1"		, reverse=0, novec=0 },
	hit_air		= { num="Ｊ攻撃浮き_A1"			, reverse=0, novec=0 },
	hit_crouch	= { num="Ｊ攻撃屈やられ_A1"		, reverse=0, novec=0 },
	guard_stand	= { num="Ｊ攻撃立ガード_A1"		, reverse=0, novec=0 },
	guard_air	= { num="Ｊ攻撃空ガード_A1"		, reverse=0, novec=0 },
	guard_crouch= { num="Ｊ攻撃屈ガード_A1"		, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "Ｊ攻撃浮き_B1",
	hit_stand	= { num="Ｊ攻撃頭やられ_B1"	, reverse=0, novec=0 },
	hit_air		= { num="Ｊ攻撃浮き_B1"		, reverse=0, novec=0 },
	hit_crouch	= { num="Ｊ攻撃屈やられ_B1"	, reverse=0, novec=0 },
	guard_stand	= { num="Ｊ攻撃立ガード_B1"	, reverse=0, novec=0 },
	guard_air	= { num="Ｊ攻撃空ガード_B1"	, reverse=0, novec=0 },
	guard_crouch= { num="Ｊ攻撃屈ガード_B1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "Ｊ攻撃浮き_C1",
	hit_stand	= { num="Ｊ攻撃頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="Ｊ攻撃浮き_C1"		, reverse=0, novec=0 },
	hit_crouch	= { num="Ｊ攻撃屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="Ｊ攻撃立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="Ｊ攻撃空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch= { num="Ｊ攻撃屈ガード_C1"	, reverse=0, novec=0 },
})

/*
VectorSample.Tbl.append( { name = "Ｊ攻撃浮き_A1",
	hit_stand	= { num="頭やられ_A1"		, reverse=0, novec=0 },
	hit_air		= { num="Ｊ攻撃浮き_A1"			, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_A1"		, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_A1"		, reverse=0, novec=0 },
	guard_air	= { num="空ガード_A1"		, reverse=0, novec=0 },
	guard_crouch= { num="屈ガード_A1"		, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "Ｊ攻撃浮き_B1",
	hit_stand	= { num="頭やられ_B1"	, reverse=0, novec=0 },
	hit_air		= { num="Ｊ攻撃浮き_B1"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_B1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_B1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_B1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_B1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "Ｊ攻撃浮き_C1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="Ｊ攻撃浮き_C1"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})
*/

VectorSample.Tbl.append( { name = "頭やられ_A1",
	hit_stand	= { num="頭やられ_A1"		, reverse=0, novec=0 },
	hit_air		= { num="浮き_A1"			, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_A1"		, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_A1"		, reverse=0, novec=0 },
	guard_air	= { num="空ガード_A1"		, reverse=0, novec=0 },
	guard_crouch= { num="屈ガード_A1"		, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "頭やられ_B1",
	hit_stand	= { num="頭やられ_B1"	, reverse=0, novec=0 },
	hit_air		= { num="浮き_B1"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_B1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_B1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_B1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_B1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "頭やられ_B2",
	hit_stand	= { num="頭やられ_B2"	, reverse=0, novec=0 },
	hit_air		= { num="浮き_B2"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_B2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_B2"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_B2"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_B2"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "頭やられ_C1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="浮き_C1"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "頭やられ微短_C1",
	hit_stand	= { num="頭やられ微短_C1"	, reverse=0, novec=0 },
	hit_air		= { num="浮き_C1"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ微短_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード微短_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード微短_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード微短_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "腹やられ_A1",
	hit_stand	= { num="腹やられ_A1"	, reverse=0, novec=0 },
	hit_air		= { num="浮き_A1"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_A1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_A1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_A1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_A1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "腹やられ_B1",
	hit_stand	= { num="腹やられ_B1"	, reverse=0, novec=0 },
	hit_air		= { num="浮き_B1"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_B1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_B1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_B1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_B1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "腹やられ_B2",
	hit_stand	= { num="腹やられ_B2"	, reverse=0, novec=0 },
	hit_air		= { num="浮き_B2"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_B2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_B2"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_B2"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_B2"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "腹やられ_C1",
	hit_stand	= { num="腹やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="浮き_C1"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "崩れ落ち_D2",
	hit_stand	= { num="崩れ落ち_D2"	, reverse=0, novec=0 },
	hit_air		= { num="浮き_C1"		, reverse=0, novec=0 },
	hit_crouch	= { num="崩れ落ち_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "２Ｃ連浮き_D1",
	hit_stand	= { num="２Ｃ連浮き_D1"	, reverse=0, novec=0 },
	hit_air		= { num="２Ｃ連浮き_D1"		, reverse=0, novec=0 },
	hit_crouch	= { num="２Ｃ連浮き_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "Ｊ攻撃浮き_A1",
	hit_stand	= { num="頭やられ_A1"	, reverse=0, novec=0 },
	hit_air		= { num="Ｊ攻撃浮き_A1"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_A1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_A1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_A1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_A1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "Ｊ攻撃浮き_B1",
	hit_stand	= { num="頭やられ_B1"	, reverse=0, novec=0 },
	hit_air		= { num="Ｊ攻撃浮き_B1"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_B1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_B1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_B1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_B1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "Ｊ攻撃浮き_C1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="Ｊ攻撃浮き_C1"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "浮き_B1",
	hit_stand	= { num="浮き_B1"		, reverse=0, novec=0 },
	hit_air		= { num="浮き_B1"		, reverse=0, novec=0 },
	hit_crouch	= { num="浮き_B1"		, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_B1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_B1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_B1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "浮き_B2",
	hit_stand	= { num="浮き_B2"		, reverse=0, novec=0 },
	hit_air		= { num="浮き_B2"		, reverse=0, novec=0 },
	hit_crouch	= { num="浮き_B2"		, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_B2"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_B2"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_B2"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "浮き_C1",
	hit_stand	= { num="浮き_C1"		, reverse=0, novec=0 },
	hit_air		= { num="浮き_C1"		, reverse=0, novec=0 },
	hit_crouch	= { num="浮き_C1"		, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "浮き_C2",
	hit_stand	= { num="浮き_C2"		, reverse=0, novec=0 },
	hit_air		= { num="浮き_C2"		, reverse=0, novec=0 },
	hit_crouch	= { num="浮き_C2"		, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "垂直浮き_C1",
	hit_stand	= { num="垂直浮き_C1"	, reverse=0, novec=0 },
	hit_air		= { num="垂直浮き_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="垂直浮き_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "垂直浮き_C2",
	hit_stand	= { num="垂直浮き_C2"	, reverse=0, novec=0 },
	hit_air		= { num="垂直浮き_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="垂直浮き_C2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "垂直浮き_D1",
	hit_stand	= { num="垂直浮き_D1"	, reverse=0, novec=0 },
	hit_air		= { num="垂直浮き_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="垂直浮き_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "垂直浮き_D2",
	hit_stand	= { num="垂直浮き_D2"	, reverse=0, novec=0 },
	hit_air		= { num="垂直浮き_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="垂直浮き_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "垂直きりもみ浮き_D1",
	hit_stand	= { num="垂直きりもみ浮き_D1"	, reverse=0, novec=0 },
	hit_air		= { num="垂直きりもみ浮き_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="垂直きりもみ浮き_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "垂直きりもみ浮き_D2",
	hit_stand	= { num="垂直きりもみ浮き_D2"	, reverse=0, novec=0 },
	hit_air		= { num="垂直きりもみ浮き_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="垂直きりもみ浮き_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "垂直きりもみ浮き_E1",
	hit_stand	= { num="垂直きりもみ浮き_E1"	, reverse=0, novec=0 },
	hit_air		= { num="垂直きりもみ浮き_E1"	, reverse=0, novec=0 },
	hit_crouch	= { num="垂直きりもみ浮き_E1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "斜め浮き_C1",
	hit_stand	= { num="斜め浮き_C1"	, reverse=0, novec=0 },
	hit_air		= { num="斜め浮き_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="斜め浮き_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "斜め浮き_C2",
	hit_stand	= { num="斜め浮き_C2"	, reverse=0, novec=0 },
	hit_air		= { num="斜め浮き_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="斜め浮き_C2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "斜めきりもみ浮き_D1",
	hit_stand	= { num="斜めきりもみ浮き_D1"	, reverse=0, novec=0 },
	hit_air		= { num="斜めきりもみ浮き_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="斜めきりもみ浮き_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "斜めきりもみ浮き_D2",
	hit_stand	= { num="斜めきりもみ浮き_D2"	, reverse=0, novec=0 },
	hit_air		= { num="斜めきりもみ浮き_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="斜めきりもみ浮き_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "斜めきりもみ浮き_E1",
	hit_stand	= { num="斜めきりもみ浮き_E1"	, reverse=0, novec=0 },
	hit_air		= { num="斜めきりもみ浮き_E1"	, reverse=0, novec=0 },
	hit_crouch	= { num="斜めきりもみ浮き_E1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})



VectorSample.Tbl.append({ name = "低斜めきりもみ浮き_C2",
	hit_stand	= { num="低斜めきりもみ浮き_C2"	, reverse=0, novec=0 },
	hit_air		= { num="低斜めきりもみ浮き_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="低斜めきりもみ浮き_C2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "横浮き_C1",
	hit_stand	= { num="横浮き_C1"	, reverse=0, novec=0 },
	hit_air		= { num="横浮き_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="横浮き_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "横浮き_C2",
	hit_stand	= { num="横浮き_C2"	, reverse=0, novec=0 },
	hit_air		= { num="横浮き_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="横浮き_C2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "横きりもみ浮き_D1",
	hit_stand	= { num="横きりもみ浮き_D1"	, reverse=0, novec=0 },
	hit_air		= { num="横きりもみ浮き_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="横きりもみ浮き_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "横きりもみ浮き_D2",
	hit_stand	= { num="横きりもみ浮き_D2"	, reverse=0, novec=0 },
	hit_air		= { num="横きりもみ浮き_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="横きりもみ浮き_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "横きりもみ浮き_E1",
	hit_stand	= { num="横きりもみ浮き_E1"	, reverse=0, novec=0 },
	hit_air		= { num="横きりもみ浮き_E1"	, reverse=0, novec=0 },
	hit_crouch	= { num="横きりもみ浮き_E1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "叩き付け_C1",
	hit_stand	= { num="叩き付け_C1"	, reverse=0, novec=0 },
	hit_air		= { num="叩き付け_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="叩き付け_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "叩き付け_C2",
	hit_stand	= { num="叩き付け_C2"	, reverse=0, novec=0 },
	hit_air		= { num="叩き付け_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="叩き付け_C2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "叩き付け_D1",
	hit_stand	= { num="叩き付け_D1"	, reverse=0, novec=0 },
	hit_air		= { num="叩き付け_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="叩き付け_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "叩き付け_D2",
	hit_stand	= { num="叩き付け_D2"	, reverse=0, novec=0 },
	hit_air		= { num="叩き付け_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="叩き付け_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "バウンド_C2",
	hit_stand	= { num="バウンド_C2"	, reverse=0, novec=0 },
	hit_air		= { num="バウンド_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="バウンド_C2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "バウンド_D1",
	hit_stand	= { num="バウンド_D1"	, reverse=0, novec=0 },
	hit_air		= { num="バウンド_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="バウンド_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "バウンド_D2",
	hit_stand	= { num="バウンド_D2"	, reverse=0, novec=0 },
	hit_air		= { num="バウンド_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="バウンド_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "バウンド_E1",
	hit_stand	= { num="バウンド_E1"	, reverse=0, novec=0 },
	hit_air		= { num="バウンド_E1"	, reverse=0, novec=0 },
	hit_crouch	= { num="バウンド_E1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "斜めスライド_D1",
	hit_stand	= { num="斜めスライド_D1"	, reverse=0, novec=0 },
	hit_air		= { num="斜めスライド_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="斜めスライド_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "斜めスライド_D2",
	hit_stand	= { num="斜めスライド_D2"	, reverse=0, novec=0 },
	hit_air		= { num="斜めスライド_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="斜めスライド_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "斜めバウンド_C1",
	hit_stand	= { num="斜めバウンド_C1"	, reverse=0, novec=0 },
	hit_air		= { num="斜めバウンド_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="斜めバウンド_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "斜めバウンド_C2",
	hit_stand	= { num="斜めバウンド_C2"	, reverse=0, novec=0 },
	hit_air		= { num="斜めバウンド_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="斜めバウンド_C2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "斜めバウンド_D1",
	hit_stand	= { num="斜めバウンド_D1"	, reverse=0, novec=0 },
	hit_air		= { num="斜めバウンド_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="斜めバウンド_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "斜めバウンド_D2",
	hit_stand	= { num="斜めバウンド_D2"	, reverse=0, novec=0 },
	hit_air		= { num="斜めバウンド_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="斜めバウンド_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*浮き_C2",
	hit_stand	= { num="頭やられ_C1"		, reverse=0, novec=0 },
	hit_air		= { num="浮き_C2"		, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"		, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*落ち_B1",
	hit_stand	= { num="頭やられ_B1"	, reverse=0, novec=0 },
	hit_air		= { num="落ち_B1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_B1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_B1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_B1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_B1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*落ち_B2",
	hit_stand	= { num="頭やられ_B2"	, reverse=0, novec=0 },
	hit_air		= { num="落ち_B2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_B2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_B2"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_B2"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_B2"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*叩き付け_C1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="叩き付け_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*叩き付け_C2",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="叩き付け_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*叩き付け_D1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="叩き付け_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*叩き付け_D2",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="叩き付け_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*バウンド_C2",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="バウンド_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*バウンド_D1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="バウンド_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*バウンド_D2",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="バウンド_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*バウンド_E1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="バウンド_E1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*斜めスライド_D1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="斜めスライド_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*斜めスライド_D2",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="斜めスライド_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*斜めバウンド_C1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="斜めバウンド_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*斜めバウンド_C2",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="斜めバウンド_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*斜めバウンド_D1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="斜めバウンド_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*斜めバウンド_D2",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="斜めバウンド_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*低浮き_B1",
	hit_stand	= { num="頭やられ_B1"	, reverse=0, novec=0 },
	hit_air		= { num="低浮き_B1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_B1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_B1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_B1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_B1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*低浮き_B2",
	hit_stand	= { num="頭やられ_B2"	, reverse=0, novec=0 },
	hit_air		= { num="低浮き_B2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_B2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_B2"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_B2"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_B2"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*低浮き_C1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="低浮き_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*低浮き短_C1",
	hit_stand	= { num="頭やられ短_C1"	, reverse=0, novec=0 },
	hit_air		= { num="低浮き_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ短_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード短_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード短_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード短_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*低浮き_C2",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="低浮き_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*低浮き_D1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="低浮き_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*低浮き_D2",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="低浮き_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*壁バウンド_C1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="壁バウンド_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*壁バウンド_C2",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="壁バウンド_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*壁バウンド_D1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="壁バウンド_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*壁バウンド_D2",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="壁バウンド_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*高壁バウンド_D1",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="高壁バウンド_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "*高壁バウンド_D2",
	hit_stand	= { num="頭やられ_C1"	, reverse=0, novec=0 },
	hit_air		= { num="高壁バウンド_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="屈やられ_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "無声ダウン",
	hit_stand	= { num="無声ダウン"	, reverse=0, novec=0 },
	hit_air		= { num="無声ダウン"	, reverse=0, novec=0 },
	hit_crouch	= { num="無声ダウン"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "壁はりつき_D1",
	hit_stand	= { num="壁はりつき_D1"	, reverse=0, novec=0 },
	hit_air		= { num="壁はりつき_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="壁はりつき_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "壁はりつき_D2",
	hit_stand	= { num="壁はりつき_D2"	, reverse=0, novec=0 },
	hit_air		= { num="壁はりつき_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="壁はりつき_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "壁バウンド_C1",
	hit_stand	= { num="壁バウンド_C1"	, reverse=0, novec=0 },
	hit_air		= { num="壁バウンド_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="壁バウンド_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "壁バウンド_C2",
	hit_stand	= { num="壁バウンド_C2"	, reverse=0, novec=0 },
	hit_air		= { num="壁バウンド_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="壁バウンド_C2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "壁バウンド_D1",
	hit_stand	= { num="壁バウンド_D1"	, reverse=0, novec=0 },
	hit_air		= { num="壁バウンド_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="壁バウンド_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "壁バウンド_D2",
	hit_stand	= { num="壁バウンド_D2"	, reverse=0, novec=0 },
	hit_air		= { num="壁バウンド_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="壁バウンド_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "壁バウンド_E1",
	hit_stand	= { num="壁バウンド_E1"	, reverse=0, novec=0 },
	hit_air		= { num="壁バウンド_E1"	, reverse=0, novec=0 },
	hit_crouch	= { num="壁バウンド_E1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "高壁バウンド_D1",
	hit_stand	= { num="高壁バウンド_D1"	, reverse=0, novec=0 },
	hit_air		= { num="高壁バウンド_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="高壁バウンド_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "高壁バウンド_D2",
	hit_stand	= { num="高壁バウンド_D2"	, reverse=0, novec=0 },
	hit_air		= { num="高壁バウンド_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="高壁バウンド_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "転倒_C1",
	hit_stand	= { num="転倒_C1"	, reverse=0, novec=0 },
	hit_air		= { num="転倒_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="転倒_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "転倒_C2",
	hit_stand	= { num="転倒_C2"	, reverse=0, novec=0 },
	hit_air		= { num="転倒_C2"	, reverse=0, novec=0 },
	hit_crouch	= { num="転倒_C2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "きりもみ転倒_D1",
	hit_stand	= { num="きりもみ転倒_D1"	, reverse=0, novec=0 },
	hit_air		= { num="きりもみ転倒_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="きりもみ転倒_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "きりもみ転倒短_D1",
	hit_stand	= { num="きりもみ転倒短_D1"	, reverse=0, novec=0 },
	hit_air		= { num="きりもみ転倒短_D1"	, reverse=0, novec=0 },
	hit_crouch	= { num="きりもみ転倒短_D1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード微短_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード微短_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード微短_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "きりもみ転倒_D2",
	hit_stand	= { num="きりもみ転倒_D2"	, reverse=0, novec=0 },
	hit_air		= { num="きりもみ転倒_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="きりもみ転倒_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

VectorSample.Tbl.append({ name = "きりもみ転倒短_D2",
	hit_stand	= { num="きりもみ転倒短_D2"	, reverse=0, novec=0 },
	hit_air		= { num="きりもみ転倒短_D2"	, reverse=0, novec=0 },
	hit_crouch	= { num="きりもみ転倒短_D2"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード微短_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード微短_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード微短_C1"	, reverse=0, novec=0 },
})																  
VectorSample.Tbl.append({ name = "空投げ落とし_C1",
	hit_stand	= { num="空投げ落とし_C1"	, reverse=0, novec=0 },
	hit_air		= { num="空投げ落とし_C1"	, reverse=0, novec=0 },
	hit_crouch	= { num="空投げ落とし_C1"	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})

/*　コピペ用
VectorSample.Tbl.append({ name = "",
	hit_stand	= { num=""	, reverse=0, novec=0 },
	hit_air		= { num=""	, reverse=0, novec=0 },
	hit_crouch	= { num=""	, reverse=0, novec=0 },
	guard_stand	= { num="立ガード_C1"	, reverse=0, novec=0 },
	guard_air	= { num="空ガード_C1"	, reverse=0, novec=0 },
	guard_crouch	= { num="屈ガード_C1"	, reverse=0, novec=0 },
})
*/

//VectorSample.Tblのチェック
if(def_VL_PrintDebugMessage)
{
	for( local i=0; i<VectorSample.Tbl.len(); i++ )
	{
		local tbl = VectorSample.Tbl[i];
		foreach( slot, val in tbl )
		{
			if( "num" in val )
			{
				//val.numが本当にあるのか調べる
				
				local find = 0;
				for( local j=0; j<VectorList.SetTbl.len(); j++ )
				{
					local vec = VectorList.SetTbl[j];
					if( "name" in vec && val.num == vec.name )
					{
						find = 1;
						break;
					}
				}
				if( !find )
				{
					print("\n Sampleにない:"+tbl.name+"."+val.num );
				}
			}
			
		}
		
	}
}

// ヒットストップ情報 
/*
HitStopList <-
{
	Light	= { value =  8 },
	Middle	= { value =  9 },
	Heavy	= { value = 10 },
	None		= { value =  1 },
	S_Heavy	= { value = 15 },
	SS_Heavy	= { value = 27 },
	S_Light	= { value =  3 },
}
*/

// name欄があるとHan6で表示される
//    7  9 11    1   16     30    4
HitStopList <-
{
	Light = { name = "A1_弱(6)",   value = 6,  countervalue =  9 }, // LV1 A1 16
	Middle = { name="B1_中(8)",    value = 8,  countervalue = 12 }, // LV2 B1 20
	Heavy = { name="C1_強(10)",    value = 10, countervalue = 15 }, // LV3 C1 24
	None = { name="なし(1)",       value = 1,  countervalue = 1  }, //         1
	S_Heavy = { name="D1_強(12)",  value = 12, countervalue = 18 }, // LV4 D1 28
	SS_Heavy = { name="E1_特(15)", value = 15, countervalue = 23 }, // LV5 E1 32
	S_Light = { name="A0_超弱(4)", value = 4,  countervalue =  6 }, // LV0 A0 12
	//SSS_Heavy = { name="E1_特(GX)", value = 25,  countervalue =  46 }, // LV0 A0 12

	// 拡張スロット
	EX = 
	[
		{ name = "微超弱(2)",  value =  2,  countervalue = 8  },
		{ name = "微弱(6)",    value =  6,  countervalue = 16 },
		{ name = "B2_中(9)",   value =  9,  countervalue = 22 },//B2
		{ name = "C2_強(11)",  value =  11, countervalue = 26 },//C2
		{ name = "D2_強(13)",  value =  16, countervalue = 34 },//D2
		{ name = "E2_特(15)",  value =  18, countervalue = 36 },//E2
		{ name = "F1_超(20)",  value =  20, countervalue = 38 },//F1
		{ name = "F2_超(22)",  value =  22, countervalue = 40 },//F2
		{ name = "F3_超(24)",  value =  24, countervalue = 42 },//F3
		{ name = "F4_超(26)",  value =  26, countervalue = 44 },//F4
	]
}


//-----------------------------------------------------------------------------
// ヒットマークリスト 基本
// 定義がないと基本値が入る
// 単体のものが１つでも足りないとエラーとなって基本値が入る
// （数字）はヒットマークの大きさイメージ
// limit --- エフェクト制限数（通常０）
// wordex --- エフェクト制限数を超えた時に呼ばれるもの

HitMarkList <-
{
	List = 
	[
		{  name = "パンチ 弱（１）", word = "Eff_Hit_PunchA"  },
		{  name = "パンチ 中（２）", word = "Eff_Hit_PunchB", limit=1, wordex="Eff_Hit_PunchBLimit" },
		{  name = "パンチ 強（３）", word = "Eff_Hit_PunchC", limit=1, wordex="Eff_Hit_PunchCLimit" },
		{  name = "キック 弱（１）", word = "Eff_Hit_KickA"  },
		{  name = "キック 中（２）", word = "Eff_Hit_KickB", limit=1, wordex="Eff_Hit_KickBLimit" },
		{  name = "キック 強（３）", word = "Eff_Hit_KickC", limit=1, wordex="Eff_Hit_KickCLimit" },

		{  name = "パンチ 特（４）", word = "Eff_Hit_PunchD"  },
		{  name = "キック 特（４）", word = "Eff_Hit_KickD"  },
		
		{  name = "旧斬り", word = "Eff_Hit_SlashOld", limit=1, wordex="Eff_Hit_SlashOldLimit"  },

		{  name = "燃え", word = "Eff_Hit_Fire"  },
		{  name = "凍結", word = "Eff_Hit_Freeze"  },
		{  name = "電撃", word = "Eff_Hit_Thunder"  },
		{  name = "発光 A", word = "Eff_Hit_FlashA"  },
		{  name = "発光 B", word = "Eff_Hit_FlashB"  },

		{  name = "なし", word = ""  },

		{  name = "掴み", word = "Eff_Hit_Catch"  },//つかんだ分岐先の攻撃判定用？あんま意味ないかも

		{  name = "斬り 間引き（２）", word = "Eff_Hit_Slash"  }, //多段ヒット用、持続短くてパーティクルなし
		{  name = "斬り 特（４）", word = "Eff_Hit_SlashD"  },
		{  name = "斬り 弱（１）", word = "Eff_Hit_SlashA"  },
		{  name = "斬り 中（２）", word = "Eff_Hit_SlashB", limit=1, wordex="Eff_Hit_SlashBLimit"  },
		{  name = "斬り 強（３）", word = "Eff_Hit_SlashC", limit=1, wordex="Eff_Hit_SlashCLimit"  },

		{  name = "突き 間引き（２）", word = "Eff_Hit_Thrust"  }, //多段ヒット用、持続短くてパーティクルなし
		{  name = "突き 特（４）", word = "Eff_Hit_ThrustD"  },
		{  name = "突き 弱（１）", word = "Eff_Hit_ThrustA"  },
		{  name = "突き 中（２）", word = "Eff_Hit_ThrustB", limit=1, wordex="Eff_Hit_ThrustBLimit"  },
		{  name = "突き 強（３）", word = "Eff_Hit_ThrustC", limit=1, wordex="Eff_Hit_ThrustCLimit"  },
		
		{  name = "パンチ 間引き（２）", word = "Eff_Hit_PunchCLimit"  }, //多段ヒット用、持続短くてパーティクルなし
		{  name = "キック 間引き（２）", word = "Eff_Hit_KickCLimit"  }, //多段ヒット用、持続短くてパーティクルなし
		
		{  name = "パンチ 〆（４）", word = "Eff_Hit_PunchFinish"  }, //とどめ用特　ＳＥ違い
		{  name = "キック 〆（４）", word = "Eff_Hit_KickFinish"  },
		{  name = "斬り 〆（４）", word = "Eff_Hit_SlashFinish"  },
		{  name = "突き 〆（４）", word = "Eff_Hit_ThrustFinish"  },
		
		{  name = "固有1 間引き（２）", word = "Eff_Hit_Chr1Atk"  }, //多段ヒット用、持続短くてパーティクルなし
		{  name = "固有1 特（４）", word = "Eff_Hit_Chr1AtkD"  },
		{  name = "固有1 弱（１）", word = "Eff_Hit_Chr1AtkA"  },
		{  name = "固有1 中（２）", word = "Eff_Hit_Chr1AtkB", limit=1, wordex="Eff_Hit_Chr1AtkBLimit"  },
		{  name = "固有1 強（３）", word = "Eff_Hit_Chr1AtkC", limit=1, wordex="Eff_Hit_Chr1AtkCLimit"  },
		
		{  name = "固有2 間引き（２）", word = "Eff_Hit_Chr2Atk"  }, //多段ヒット用、持続短くてパーティクルなし
		{  name = "固有2 特（４）", word = "Eff_Hit_Chr2AtkD"  },
		{  name = "固有2 弱（１）", word = "Eff_Hit_Chr2AtkA"  },
		{  name = "固有2 中（２）", word = "Eff_Hit_Chr2AtkB", limit=1, wordex="Eff_Hit_Chr2AtkBLimit"  },
		{  name = "固有2 強（３）", word = "Eff_Hit_Chr2AtkC", limit=1, wordex="Eff_Hit_Chr2AtkCLimit"  },
		
		{  name = "炎 弱（１）", word = "Eff_Hit_FireA"  },
		{  name = "炎 中（２）", word = "Eff_Hit_FireB", limit=1, wordex="Eff_Hit_FireBLimit"  },
		{  name = "炎 強（３）", word = "Eff_Hit_FireC", limit=1, wordex="Eff_Hit_FireCLimit"  },		
		{  name = "炎 特（４）", word = "Eff_Hit_FireD"  },
		
		{  name = "氷 弱（１）", word = "Eff_Hit_FreezeA"  },
		{  name = "氷 中（２）", word = "Eff_Hit_FreezeB", limit=1, wordex="Eff_Hit_FreezeBLimit"  },
		{  name = "氷 強（３）", word = "Eff_Hit_FreezeC", limit=1, wordex="Eff_Hit_FreezeCLimit"  },		
		{  name = "氷 特（４）", word = "Eff_Hit_FreezeD"  },
		
		{  name = "雷打 弱（１）", word = "Eff_Hit_ThunderA"  },
		{  name = "雷打 中（２）", word = "Eff_Hit_ThunderB", limit=1, wordex="Eff_Hit_ThunderBLimit"  },
		{  name = "雷打 強（３）", word = "Eff_Hit_ThunderC", limit=1, wordex="Eff_Hit_ThunderCLimit"  },		
		{  name = "雷打 特（４）", word = "Eff_Hit_ThunderD"  },
		
		{  name = "雷斬 弱（１）", word = "Eff_Hit_ThSlashA"  },
		{  name = "雷斬 中（２）", word = "Eff_Hit_ThSlashB", limit=1, wordex="Eff_Hit_ThSlashBLimit"  },
		{  name = "雷斬 強（３）", word = "Eff_Hit_ThSlashC", limit=1, wordex="Eff_Hit_ThSlashCLimit"  },		
		{  name = "雷斬 特（４）", word = "Eff_Hit_ThSlashD"  },
	]

	// 単体
	Guard = {  name = "", word = "Eff_Hit_Guard", limit=1, wordex="Eff_Hit_GuardLimit" }, // 通常ガードエフェクト
	GuardEx = {  name = "", word = "Eff_Hit_GuardEx", limit=1, limit=1, wordex="Eff_Hit_GuardExLimit"  }, // SPガード状態でのガードエフェクト
	CounterHit = {  name = "", word = "Eff_Hit_Counter"  }, // カウンターヒットエフェクト
}


//print("\name:"+vectmpl.table[10].name);
//print("\nukemitime:"+vectmpl.table[10].tbl[0].ukemitime);

print( format("\n[VectorTable] %d個のベクトルを登録しました",findcount ));